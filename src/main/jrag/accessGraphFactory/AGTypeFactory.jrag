import puck.graph.AGBuildingError;
import puck.graph.Tuple;
import puck.graph.Type;
import puck.javaGraph.JavaNamedType;
import puck.javaGraph.MethodType;
import scala.Some;

aspect AccessGraphTypeFactory {
	

	public abstract void BodyDecl.buildAGType(JavaGraphBuilder builder);
	
	public void MemberTypeDecl.buildAGType(JavaGraphBuilder builder){}
	public void StaticInitializer.buildAGType(JavaGraphBuilder builder){}
	public void InstanceInitializer.buildAGType(JavaGraphBuilder builder){}


	static Tuple ASTNode.astParamsToAGType(JavaGraphBuilder builder, Callable c){
		ArrayList<Type> tparams = new ArrayList<Type>();
		for(ParameterDeclaration pdecl: c.getParameterList()){
			int agTypeNode = pdecl.getTypeAccess().buildAGNode(builder);
			tparams.add(new JavaNamedType(agTypeNode));
		}
		return new Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams).toList());
	}

	public void FieldDecl.buildAGType(JavaGraphBuilder builder){
		throw new AGBuildingError("missing type for FieldDecl");
	}
		
	public void MethodDecl.buildAGType(JavaGraphBuilder builder){
		JavaNamedType retType =
			new JavaNamedType(getTypeAccess().buildAGNode(builder));
		MethodType mt = new MethodType(ASTNode.astParamsToAGType(builder,this), retType);
	    Some<Type> typeHolder = new Some<Type>(mt);
	    builder.setType(builder.getNodeByName(fullName()), typeHolder);
	}

	public void ConstructorDecl.buildAGType(JavaGraphBuilder builder){
		JavaNamedType retType = 
		           new JavaNamedType(hostType().buildAGNode(builder));
		MethodType ct = new MethodType(ASTNode.astParamsToAGType(builder,this), retType);
		Some<Type> typeHolder = new Some<Type>(ct);
        builder.setType(builder.getNodeByName(fullName()), typeHolder);
	}

	public void FieldDeclaration.buildAGType(JavaGraphBuilder builder){
		JavaNamedType type = new JavaNamedType(type().buildAGNode(builder));
	    Some<Type> typeHolder = new Some<Type>(type);
		builder.setType(builder.getNodeByName(fullName()), typeHolder);
	}



}