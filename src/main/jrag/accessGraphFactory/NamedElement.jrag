
aspect NamedElement {

	syn boolean ASTNode.isNamedElement();
	eq ASTNode.isNamedElement() = false;

	eq TypeDecl.isNamedElement() = true;
	//eq InterfaceDecl.isNamedElement() = true;
	//eq ClassDecl.isNamedElement() = true;

	eq FieldDeclaration.isNamedElement() = true;
	eq MethodDecl.isNamedElement() = true;
	eq ConstructorDecl.isNamedElement() = true;
	


	interface AGNamedElement {
		String fullName();
		String name();

		void registerDecl(JavaGraphBuilder builder, int thisId);

	}

	TypeDecl implements AGNamedElement;
	// InterfaceDecl implements AGNamedElement;
	// ClassDecl implements AGNamedElement;

	FieldDeclaration implements AGNamedElement;
	MethodDecl implements AGNamedElement;
	ConstructorDecl implements AGNamedElement;

	// interface AGTypedNamedElement {

	// }

	//duplication needed for overload static resolution
	public void TypeDecl.registerDecl(JavaGraphBuilder builder, int thisId){
      System.err.println(this.fullName() + " - " + this.getClass() + " registered as primitive");
      builder.registerDecl(thisId, this);
  	}

	public void InterfaceDecl.registerDecl(JavaGraphBuilder builder, int thisId){
		builder.registerDecl(thisId, this);
	}

	public void ClassDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    
    public void ConstructorDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    public void FieldDeclaration.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    public void MethodDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    public void TypeVariable.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    syn JavaNodeKind AGNamedElement.getAGNodeKind();

    eq TypeDecl.getAGNodeKind(){
    	throw new AGBuildingError(this.fullName() + " - " + this.getClass()+" : Unkown nodekind");
    }
    eq TypeVariable.getAGNodeKind() = JavaNodeKind.typeVariable();
    eq ClassDecl.getAGNodeKind() = JavaNodeKind.classKind();
    eq InterfaceDecl.getAGNodeKind() = JavaNodeKind.interfaceKind();
    eq PrimitiveType.getAGNodeKind() = JavaNodeKind.primitive();
	eq VoidType.getAGNodeKind() = JavaNodeKind.primitive();
    eq NullType.getAGNodeKind() = JavaNodeKind.primitive();

    eq FieldDeclaration.getAGNodeKind() = JavaNodeKind.field();

    eq MethodDecl.getAGNodeKind(){
    	if(this.isAbstract())
	        return JavaNodeKind.abstractMethod();
	    else
	        return JavaNodeKind.method();
    }

    eq ConstructorDecl.getAGNodeKind() = JavaNodeKind.constructor();



}