
import puck.graph.AGBuildingError;


//import puck.javaAG.mutable.JavaAccessGraph;
//import puck.javaAG.mutable.nodeKind.JavaNodeKind;
//import puck.javaAG.mutable.JavaNamedType;
//import puck.javaAG.mutable.MethodType;
//import puck.graph.mutable.NamedType;
//import puck.graph.mutable.Tuple;
//import puck.graph.mutable.Type;

import puck.javaAG.immutable.JavaGraphBuilder;
import puck.javaAG.immutable.nodeKind.JavaNodeKind;
import puck.javaAG.immutable.JavaNamedType;
import puck.javaAG.immutable.MethodType;
import puck.graph.immutable.NamedType;
import puck.graph.immutable.Tuple;
import puck.graph.immutable.Type;
import puck.javaAG.immutable.nodeKind.MethodTypeHolder;
import puck.javaAG.immutable.nodeKind.NamedTypeHolder;

aspect AccessGraphFactory {

	public interface LoadingListener {
		public void update(double loading);
	}	

	public JavaGraphBuilder Program.buildAccessGraph(Map<String,Collection<BodyDecl>> stringsRequest, LoadingListener ll){

		JavaGraphBuilder accessGraph = new JavaGraphBuilder(this);

		if(stringsRequest != null){
			for (java.util.Map.Entry<String, Collection<BodyDecl>>  entry : allStringUses(stringsRequest).entrySet()) {
				accessGraph.addStringLiteral(entry.getKey(), entry.getValue());
			}
		}

		if(ll == null)
			silentBuild(accessGraph);
		else
			verboseBuild(accessGraph, ll);

		return accessGraph;
	}

	private void Program.silentBuild(JavaGraphBuilder accessGraph){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
		}
	}

	private void Program.verboseBuild(JavaGraphBuilder accessGraph, LoadingListener ll){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		double nchild = compUnitList.getNumChild();
		double d = 0.0;
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
			d++;
			ll.update(d/nchild);
		}
		ll.update(1);
	}


	public int ASTNode.buildAG(JavaGraphBuilder accessGraph){
		// for(int i=0; i< getNumChild(); i++){
		// 	getChild(i).buildAG(accessGraph);
		// }
		// return null;
		throw new AGBuildingError(this.getClass()+" does not know how to create an AccessGraph");
	}

	public boolean CompilationUnit.buildAccessGraph_CU(JavaGraphBuilder accessGraph){
		if(pathName() != null){
			int packageNode = accessGraph.addPackage(getPackageDecl(), true);

			for (TypeDecl td : getTypeDecls()){
				accessGraph.addContains(packageNode, td.buildAG(accessGraph));
			}
			return true;
		}
		else{
			if(!getPackageDecl().equals("@primitive"))
				System.err.println(getPackageDecl()+" : pathName = null");
			return false;
		}
	}

	public int MemberClassDecl.buildAG(JavaGraphBuilder accessGraph){
		return typeDecl().buildAG(accessGraph);
	}

	public int FieldDecl.buildAG(JavaGraphBuilder accessGraph, int usedNode){
		int agNode = buildAGNode(accessGraph);
		
		//AST.List<VariableDecl> vdl = getVariableDeclList();
		for (VariableDecl vd : getVariableDeclList()) {
			int vdNode = vd.buildAGNode(accessGraph);
			accessGraph.addUses(vdNode, usedNode);
		}

		return agNode;
	}
	public int FieldDecl.buildAG(JavaGraphBuilder accessGraph){
		int agNode = buildAGNode(accessGraph);
		for (VariableDecl vd : getVariableDeclList()) {
			vd.buildAGNode(accessGraph);
		}
		return agNode;
	}


	public int FieldDeclaration.buildAG(JavaGraphBuilder accessGraph){
		int agNode = buildAGNode(accessGraph);

		for (Access user : uses()) {
			int agUser = user.hostBodyDecl().buildAGNode(accessGraph);
			accessGraph.addUses(agUser, agNode);

		}

		return agNode;
	}


	public int Expr.buildDominantUserAGNode(JavaGraphBuilder accessGraph){
		throw new AGBuildingError("Cannot get a primary user from the qualifier : " + this +
                " ("+this.getClass()+")");
	}


	public int VarAccess.buildDominantUserAGNode(JavaGraphBuilder accessGraph){
      return decl().buildAGNode(accessGraph);
  	}

  	//in case of static call
  	public int TypeAccess.buildDominantUserAGNode(JavaGraphBuilder accessGraph){
      return decl().buildAGNode(accessGraph);
  	}

  	public int MethodAccess.buildDominantUserAGNode(JavaGraphBuilder accessGraph){
      return decl().buildAGNode(accessGraph);
  	}
  	 public int ArrayAccess.buildDominantUserAGNode(JavaGraphBuilder accessGraph){
      //System.out.println("ArrayAccess.buildDominantUserAGNode " +this.toString());
      return varDecl().buildAGNode(accessGraph);
  }

  	public int MethodDecl.buildAG(JavaGraphBuilder accessGraph){
        int agNode = buildAGNode(accessGraph);

        int hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {
            int agUser = user.hostBodyDecl().buildAGNode(accessGraph);
            
            accessGraph.addUses(agUser, agNode);

            //if user.getQualifier == null
            //then the method is called from within the hosting class (implicit "this" qualifier)
            int agDominantUser;
            if(user.getQualifier()==null
                    || user.getQualifier().isThisAccess()
                    || user.getQualifier().isSuperAccess()) {
                //agDominantUser = user.hostBodyDecl().buildAGNode(accessGraph);
                agDominantUser =  user.hostType().buildAGNode(accessGraph);
                accessGraph.addUses(agDominantUser, hostTypeAGNode);
            }
            else{
                Expr qualifier = user.getQualifier();
                if(qualifier.isArrayAccess()){
                    /*System.out.println("exploring uses of "+this.getDesambiguateFullName());
                	System.out.println(qualifier +" isArrayAccess nextAccess: " +qualifier.nextAccess());*/

                    //TODO check if always works !!!
                    // in StackArray exemple
                    // expression  stacks[0].push( i )
                    // ArrayAccess is [0]
                    //parentDot is [0].push(i)
                    //parentDot.parentDot is  stacks[0].push( i ) ...
                    AbstractDot d = qualifier.parentDot().parentDot();
                    d.rotateRight();
                    /*System.out.println("leftSide of ancestor dot rotated right : " + d.leftSide());
                    System.out.println(" parent is : " + qualifier.parent);
                    System.out.println(" parentDot is : " + qualifier.parentDot());
                    System.out.println(" parentDot().parentDot is : " + qualifier.parentDot().parentDot());*/

                    qualifier = d.leftSide();
                }

                agDominantUser = qualifier.buildDominantUserAGNode(accessGraph);
            }
            accessGraph.addUsesDependency(agDominantUser, hostTypeAGNode, 
            							  agUser, agNode);
            //System.out.print("uses( "+agUser+ ", "+agNode+")");
            //System.out.println(" = uses( "+user+ ", "+this+")");
            //System.out.println(" dominated by : uses ("+agDominantUser + ", "+ hostTypeAGNode+")");
            //System.out.println(" = uses( "+user.hostType()+ ", "+ hostType()+")");
        }

        return agNode;
    }

	public int ConstructorDecl.buildAG(JavaGraphBuilder accessGraph){
		int agNode = buildAGNode(accessGraph);

        int hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {
            int agUser = user.hostBodyDecl().buildAGNode(accessGraph);

            accessGraph.addUses(agUser, agNode);

        //    MethodDecl.addDependantUse(accessGraph, user, agNode, hostTypeAGNode);
            accessGraph.addUsesDependency(agUser, hostTypeAGNode,
                    agUser, agNode);

        }
		return agNode;
	}

	public int Variable.buildAGNode(JavaGraphBuilder accessGraph);
	

	public int InstanceInitializer.buildAG(JavaGraphBuilder accessGraph){
		System.err.println("TODO !! InstanceInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public int StaticInitializer.buildAG(JavaGraphBuilder accessGraph){
		System.err.println("TODO !! StaticInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public int TypeDecl.buildAG(JavaGraphBuilder accessGraph){
		
		int tdNode = buildAG_TypeDecl(accessGraph);

		for (Access use : uses()) {
			BodyDecl hostBodyDecl = use.hostBodyDecl();
            if (hostBodyDecl != null) {
                int userNode = hostBodyDecl.buildAGNode(accessGraph);
                accessGraph.addUses(userNode, tdNode);
            }
		}

		for (BodyDecl bd : getBodyDeclList()) {

			int bdNode = bd.buildAG(accessGraph);
			//if bd is an initializer (static or not), 
			//the corresponding AGNode is tdNode !!
			if(bdNode!=tdNode)
				accessGraph.addContains(tdNode, bdNode);
		}

		return tdNode;
	}

    static void TypeDecl.addImplements(JavaGraphBuilder accessGraph,
    	int sub, AST.List<Access> implementList){

    	for(Access a : implementList){
    		
    		if(!((TypeDeclared)a).getTypeDecl().isFromStdLib()){
    		    accessGraph.addIsa(sub, a.buildAGNode(accessGraph));
			}

			a.addExtendsAndImplementsUses(accessGraph, sub);
    	}
	}

	int TypeDecl.buildAG_TypeDecl(JavaGraphBuilder accessGraph){
		throw new AGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}

	int ClassDecl.buildAG_TypeDecl(JavaGraphBuilder accessGraph){
		int agNode = buildAGNode(accessGraph);

		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			if(!superclass().isFromStdLib())
			    accessGraph.addIsa(agNode, getSuperClassAccess().buildAGNode(accessGraph));

			getSuperClassAccess().addExtendsAndImplementsUses(accessGraph, agNode);
		}

		TypeDecl.addImplements(accessGraph, agNode, getImplementss());

		return agNode;
	}

	int InterfaceDecl.buildAG_TypeDecl(JavaGraphBuilder accessGraph){
		int agNode = buildAGNode(accessGraph);
		
		TypeDecl.addImplements(accessGraph, agNode, getSuperInterfaceIdList());

		return agNode;
	}


	void Access.addExtendsAndImplementsUses(JavaGraphBuilder accessGraph, int sub){
		throw new AGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	void TypeAccess.addExtendsAndImplementsUses(JavaGraphBuilder accessGraph, int sub){
		if(!decl().isFromStdLib()){
			int sn = decl().buildAGNode(accessGraph);
			accessGraph.addUses(sub, sn);
		}
	}

	void ParTypeAccess.addExtendsAndImplementsUses(JavaGraphBuilder accessGraph, int sub){
		getTypeAccess().addExtendsAndImplementsUses(accessGraph, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addExtendsAndImplementsUses(accessGraph, sub);
		}
	}


	public JavaNodeKind TypeDecl.getAGNodeKind(){
		throw new AGBuildingError(this.getClass()+" : Unkown nodekind");
	}

	public JavaNodeKind ClassDecl.getAGNodeKind(){
		return JavaNodeKind.classKind();
	}

	public JavaNodeKind InterfaceDecl.getAGNodeKind(){
		return JavaNodeKind.interfaceKind();
	}

	public int ASTNode.buildAGNode(JavaGraphBuilder accessGraph){
		throw new AGBuildingError(this.getClass()+" does not know how to create an AG Node");
	}



	public void TypeDecl.registerDecl(JavaGraphBuilder accessGraph, int agnode){
      throw new Error(this.getClass() +" does not know how to register itself");
  	}

  	public void ClassDecl.registerDecl(JavaGraphBuilder accessGraph, int agnode){
        accessGraph.registerDecl(agnode, this);
    }

    public void InterfaceDecl.registerDecl(JavaGraphBuilder accessGraph, int agnode){
        accessGraph.registerDecl(agnode, this);
    }

	public int TypeDecl.buildAGNode(JavaGraphBuilder accessGraph){
      int node;
      if(isFromStdLib())
          node = accessGraph.addApiTypeNode(this, false);
      else
          node = accessGraph.addNode(fullName(), name(), getAGNodeKind(), JavaNodeKind.noType());


      registerDecl(accessGraph, node);
      return node;
  	}

	

	public int TypeAccess.buildAGNode(JavaGraphBuilder accessGraph){
		return decl().buildAGNode(accessGraph);
	}

	public int ParTypeAccess.buildAGNode(JavaGraphBuilder accessGraph){
		return accessGraph.addNode(fullName(), name(), 
				getTypeDecl().getAGNodeKind(), JavaNodeKind.noType());
	}
	

	/*public AGNode BodyDecl.buildAGNode(JavaGraphBuilder accessGraph){
		System.out.println("Bodydecl or subclass");
		return super.buildAGNode(accessGraph);
	}*/

	public int FieldDeclaration.buildAGNode(JavaGraphBuilder accessGraph){
		JavaNamedType type = new JavaNamedType(type().buildAGNode(accessGraph), type().name());
        NamedTypeHolder th = new NamedTypeHolder(type);
        int node = accessGraph.addNode(fullName(), name(), JavaNodeKind.field(), th);

        accessGraph.registerDecl(node, this);
        return node;
	}

	public int VoidType.buildAGNode(JavaGraphBuilder accessGraph){
		int node = accessGraph.getNodeByName(fullName());
      //TODO FIX !!
      //accessGraph.registerDecl(node, this);
      return node;
	}
	public int PrimitiveType.buildAGNode(JavaGraphBuilder accessGraph){
		int node =  accessGraph.getNodeByName(fullName());

      	accessGraph.registerDecl(node, this);

      	return node;

	}

	/*public AGNode FieldDecl.buildAGNode(JavaGraphBuilder accessGraph){
		AGNode agTypeNode = getTypeAccess().buildAGNode(accessGraph);

		return accessGraph.addNode(fullName(), name(), 
				JavaNodeKind.field(new JavaNamedType(agTypeNode)));
	}*/

	static Tuple ASTNode.astParamsToAGType(JavaGraphBuilder accessGraph, Callable c){
		ArrayList<Type> tparams = new ArrayList<Type>();
		for(ParameterDeclaration pdecl: c.getParameterList()){
			int agTypeNode = pdecl.getTypeAccess().buildAGNode(accessGraph);
			tparams.add(new JavaNamedType(agTypeNode, pdecl.getTypeAccess().typeName()));
		}
		return new Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams).toList());
	}


	public int MethodDecl.buildAGNode(JavaGraphBuilder accessGraph){

	  MethodType mt = new MethodType(ASTNode.astParamsToAGType(accessGraph,this),
                 new JavaNamedType(getTypeAccess().buildAGNode(accessGraph), getTypeAccess().typeName()));

      MethodTypeHolder typeHolder = new MethodTypeHolder( mt );

            JavaNodeKind kind;
              if(this.isAbstract())
                  kind = JavaNodeKind.abstractMethod();
              else
                  kind = JavaNodeKind.method();

            int node = accessGraph.addNode(fullName(), name(), kind, typeHolder);

            accessGraph.registerDecl(node, this);

            return node;
	}

	public int ConstructorDecl.buildAGNode(JavaGraphBuilder accessGraph){
		
      MethodType constructorAGType = new MethodType(ASTNode.astParamsToAGType(accessGraph,this),
                    new JavaNamedType(hostType().buildAGNode(accessGraph), hostType().name()));

      MethodTypeHolder typeHolder = new MethodTypeHolder( constructorAGType );
      int node = accessGraph.addNode(fullName(), name(),
            			JavaNodeKind.constructor(), typeHolder);

      accessGraph.registerDecl(node, this);
      return node;
	}

	

	public int InstanceInitializer.buildAGNode(JavaGraphBuilder accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public int StaticInitializer.buildAGNode(JavaGraphBuilder accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public int VariableDeclaration.buildAGNode(JavaGraphBuilder accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	public int ParameterDeclaration.buildAGNode(JavaGraphBuilder accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	interface TypeDeclared{
		TypeDecl getTypeDecl();
	}

	TypeAccess implements TypeDeclared;
	public TypeDecl TypeAccess.getTypeDecl(){
		return decl();
	}
	ParTypeAccess implements TypeDeclared;
	public TypeDecl ParTypeAccess.getTypeDecl(){
		return ((TypeAccess)getTypeAccess()).decl();
	}

	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().packageName() == PRIMITIVE_PACKAGE_NAME ||
              compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}


	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();
		for(ConstructorDecl c : ctrs){
			if(c.getParametersAsString().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}
	

	//also present in jrrt-read-only/test/Testing.jrag
	public Program Frontend.getProgram() {
		return program;
	}
}