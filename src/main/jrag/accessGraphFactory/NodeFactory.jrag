aspect NodeFactory  {


	public int ASTNode.buildAGNode(JavaGraphBuilder builder){

		if(isNamedElement()){
			AGNamedElement namedElement = (AGNamedElement) this;
			try {
				return builder.getNodeByName(namedElement.fullName());
			}
			catch(NoSuchElementException e){

				int node = builder.addNode(namedElement.fullName(), namedElement.name(),
					namedElement.getAGNodeKind(), JavaNodeKind.noType());

			    namedElement.registerDecl(builder, node);
	      		return node;
  			}
		}

		throw new AGBuildingError(this + " (" + this.getClass()+ ") in "+ this.hostBodyDecl() +
			" in " + this.compilationUnit().pathName() +
			" does not know how to create an AG Node");
	}

//	public int ClassAccess.buildAGNode(JavaGraphBuilder builder){
//		this.lock();
//
//		int node = builder.addNode("java.lang.Class", "Class",
//		JavaNodeKind.classKind(), JavaNodeKind.noType());
//
//		registerDecl(builder, node);
//		return node;
//	}

	public int SuperConstructorAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return decl().buildAGNode(builder);
	}

	public int ClassInstanceExpr.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return decl().buildAGNode(builder);
	}

	public int ClassAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return type().buildAGNode(builder);
	}

	public int ArrayAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return type().buildAGNode(builder);
	}
	public int TypeAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return decl().buildAGNode(builder);
	}

	public int ParTypeAccess.buildAGNode(JavaGraphBuilder builder){
		return ((TypeAccess)getTypeAccess()).buildAGNode(builder);
	}


	interface TypeDeclared{
		TypeDecl getTypeDecl();
	}

	TypeAccess implements TypeDeclared;
	
	public TypeDecl TypeAccess.getTypeDecl(){
		return decl();
	}
	ParTypeAccess implements TypeDeclared;

	public TypeDecl ParTypeAccess.getTypeDecl(){
		return ((TypeAccess)getTypeAccess()).getTypeDecl();
	}

	public int MethodAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return decl().buildAGNode(builder);
	}
	public int VarAccess.buildAGNode(JavaGraphBuilder builder){
		this.lock();
		return decl().buildAGNode(builder);
  	}

	public int Variable.buildAGNode(JavaGraphBuilder builder);

		
	public int VariableDeclaration.buildAGNode(JavaGraphBuilder builder){
		return hostBodyDecl().buildAGNode(builder);
	}

	public int ParameterDeclaration.buildAGNode(JavaGraphBuilder builder){
		return hostBodyDecl().buildAGNode(builder);
	}

	//needed because otherwise JastAdd create and empty decl
	public int FieldDeclaration.buildAGNode(JavaGraphBuilder builder){
		return super.buildAGNode(builder);
	}


	/*public AGNode FieldDecl.buildAGNode(JavaGraphBuilder builder){
		AGNode agTypeNode = getTypeAccess().buildAGNode(builder);

		return builder.addNode(fullName(), name(), 
				JavaNodeKind.field(new JavaNamedType(agTypeNode)));
	}*/

	

	public int InstanceInitializer.buildAGNode(JavaGraphBuilder builder){
		return hostType().buildAGNode(builder);
	}

	public int StaticInitializer.buildAGNode(JavaGraphBuilder builder){
		return hostType().buildAGNode(builder);
	}

	public int ParExpr.buildAGNode(JavaGraphBuilder builder){
		return getExpr().buildAGNode(builder);
	}

	public int Dot.buildAGNode(JavaGraphBuilder builder){
		if(isRightRotated())
			rotateLeft();

		return getRight().buildAGNode(builder);
	}

	

}