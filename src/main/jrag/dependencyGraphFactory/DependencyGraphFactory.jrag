import puck.javaGraph.JavaGraphBuilder;

aspect DependencyGraphFactory {

	public interface LoadingListener {
		public void update(double loading);
	}	


	public JavaGraphBuilder Program.buildDependencyGraph(Map<String,Collection<BodyDecl>> stringsRequest, LoadingListener ll){

		JavaGraphBuilder builder = new JavaGraphBuilder(this);

		if(stringsRequest != null){
			for (java.util.Map.Entry<String, Collection<BodyDecl>>  entry : allStringUses(stringsRequest).entrySet()) {
				builder.addStringLiteral(entry.getKey(), entry.getValue());
			}
		}

		if(ll == null)
            ll = new LoadingListener(){ public void update(double loading){}};

		build(builder, ll);

		return builder;
	}

    public int Program.getNumCuFromSources(){
        int i =0;
        for (CompilationUnit cu : (List<CompilationUnit>)getCompilationUnitList()){
            if(cu.fromSource())
            i++;
        }
        return i;
    }

	private void Program.build(JavaGraphBuilder builder, LoadingListener ll){
		double nchild = getNumCuFromSources();
		double d = 0.0;
        for (CompilationUnit cu : (List<CompilationUnit>)getCompilationUnitList()){
            if(cu.fromSource()){
                if(!cu.buildDependencyGraph_CU(builder))
                break;
                d++;
                ll.update(d/nchild);
            }
        }
		ll.update(1);
	}


	void ASTNode.buildDGInChildren(JavaGraphBuilder builder, int containerId){
		for(int i=0; i< getNumChild(); i++){
			getChild(i).buildDG(builder, containerId);
		}
	}

	public void ASTNode.buildDG(JavaGraphBuilder builder, int containerId){
		//System.err.println(this.getClass() + ".buildDG() : " + getNumChild() +" children");
		buildDGInChildren(builder, containerId);
	}	

	public boolean CompilationUnit.buildDependencyGraph_CU(JavaGraphBuilder builder){
		if(pathName() != null){
			int packageNode = builder.addPackage(getPackageDecl(), true);

			for (TypeDecl td : getTypeDecls()){
				td.buildDG(builder, packageNode);
			}
			return true;
		}
		else{
			if(!getPackageDecl().equals("@primitive"))
				System.err.println(getPackageDecl()+" : pathName = null");
			return false;
		}
	}

	public void TypeDecl.buildDG(JavaGraphBuilder builder, int containerId){
		
		int tdNode = buildDG_TypeDecl(builder);
		builder.addContains(containerId, tdNode);

//        System.out.println("[BUILD] TypeDecl.buildDG " + this.fullName());
//        System.out.println("[BUILD] "+this.getClass()+".isParameterized = "+ isParameterizedType());

        if(isParameterizedType()){
            ParTypeDecl parTypeDecl = (ParTypeDecl) this;
            System.out.println("[BUILD] parameterized type " + parTypeDecl.nameWithArgs() +
        " [TODO] difference with  GenericType ??? ");

            /*for(int i=0; i<parTypeDecl.getNumArgument(); i++){
                Access ta = parTypeDecl.getArgument(i);
                int typeArgNode = ta.buildDGNode(builder);

                builder.addContains(tdNode, typeArgNode);
            }*/
        }

//        if(isGenericType()){
//            GenericTypeDecl genericTypeDecl = (GenericTypeDecl) this;
//            List<TypeVariable>  types = genericTypeDecl.getTypeParameterList();
//            for(TypeVariable tv : types){
//                int typeArgNode = tv.buildDGNode(builder);
//                builder.addContains(tdNode, typeArgNode);
//            }
//        }


        for (BodyDecl bd : getBodyDeclList()) {
			bd.buildDG(builder, tdNode);
		}
	}


	int TypeDecl.buildDG_TypeDecl(JavaGraphBuilder builder){
		throw new DGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}


	void ClassDecl.addExtends(JavaGraphBuilder builder, int thisId){
		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			builder.addIsa(thisId, getSuperClassAccess().buildDGNode(builder));

			getSuperClassAccess().addImplementsUses(builder, thisId);
		}
	}

	int ClassDecl.buildDG_TypeDecl(JavaGraphBuilder builder){
		int nodeId = buildDGNode(builder);

		addExtends(builder, nodeId);

		TypeDecl.addImplements(builder, nodeId, getImplementss());

		return nodeId;
	}

	int InterfaceDecl.buildDG_TypeDecl(JavaGraphBuilder builder){
		int agNode = buildDGNode(builder);

		TypeDecl.addImplements(builder, agNode, getSuperInterfaceIdList());

		return agNode;
	}




	public void BodyDecl.buildDG(JavaGraphBuilder builder, int hostTypeDeclId ){
		if(isNamedElement()){
			int nodeId = buildDGNode(builder);
			builder.addContains(hostTypeDeclId, nodeId);
			super.buildDG(builder, nodeId);
			buildDGType(builder);

		}
		else
			System.err.println("TODO !! "+ this.getClass() +".buildDG(JavaGraphBuilder, int)");
		
	}

	static void Access.buildDG(TypeMemberAccess access, int containerId, JavaGraphBuilder builder){
		int nodeId = access.buildDGNode(builder);

		builder.addUses(containerId, nodeId);


		//System.out.println("Searching type user for uses" + builder.getFullName(containerId) + " -> " + builder.getFullName(nodeId));

		int typeUserId = access.buildTypeUserDGNode(builder);
		int typeUsedId = access.decl().hostType().buildDGNode(builder);

		builder.addTypeRelationship(typeUserId, typeUsedId,
									containerId, nodeId);
	}
	public void MethodAccess.buildDG(JavaGraphBuilder builder, int containerId){

		buildDG(this, containerId, builder);

		for(Expr e : getArgList()){
			e.buildDG(builder, containerId);
		}
	}

	public void VarAccess.buildDG(JavaGraphBuilder builder, int containerId){
		//if(decl().isInstanceVariable() || decl().isClassVariable()){
		/*if(decl().isLocalVariable() || decl().isMethodParameter()){
			builder.addUses(containerId, buildDGNode(builder));
		}
		else */if(decl().isField()){
			buildDG(this, containerId, builder);
		}
	}
	
	public void SuperConstructorAccess.buildDG(JavaGraphBuilder builder, int containerId){
		//if(!decl().type().fullName().equals( "java.lang.Object")){
		if(!decl().type().fullName().equals( "@primitive.Unknown")){
		//happens when call to constructor of java.lang.Object TODO check if no other cases

		  buildDGInChildren(builder, containerId);

	      int classNodeId = decl().buildDGNode(builder);
	      int ctorNodeId = buildDGNode(builder);

	      builder.addUses(containerId, classNodeId);
	      builder.addUses(ctorNodeId, classNodeId);

	      builder.addTypeRelationship(containerId, classNodeId,
	              containerId, ctorNodeId);

	    }
  	}

	public void ClassInstanceExpr.buildDG(JavaGraphBuilder builder, int containerId){
		//System.err.println("ClassInstanceExpr.buildDG : " + this);

		buildDGInChildren(builder, containerId);

		int classNodeId = getAccess().buildDGNode(builder);
        int ctorNodeId = buildDGNode(builder);

		builder.addUses(containerId, classNodeId);
        builder.addUses(containerId, ctorNodeId);

		builder.addTypeRelationship(containerId, classNodeId,
                    			    containerId, ctorNodeId);

	}

	syn boolean ASTNode.isAbstractDot();
	eq ASTNode.isAbstractDot() = false;
	eq AbstractDot.isAbstractDot() = true;

	public Expr Access.getLeftExpr(){
		if(!getParent().isAbstractDot())
			return null;
		
		AbstractDot parent = (AbstractDot) getParent();
		Expr lsibling = parent.getLeft();
		
		if(lsibling == this) //already leftmost child
			return null;
		
		if(lsibling.isAbstractDot())
			return ((AbstractDot)lsibling).getRight();
		
		return lsibling;
	}

	public void AbstractDot.buildDG(JavaGraphBuilder builder, int containerId){
		if(isRightRotated())
			rotateLeft();

		buildDGInChildren(builder, containerId);
	}

	public void Access.buildDG(JavaGraphBuilder builder, int containerId){
		if(this.getClass() != ThisAccess.class
			&& this.getClass() != ClassAccess.class)
			System.err.println("TODO !! "+this.getClass()+".buildDG : " + this);
		super.buildDG(builder, containerId);
	}

	public void ArrayAccess.buildDG(JavaGraphBuilder builder, int containerId){
		int nodeId = buildDGNode(builder);
		builder.addUses(containerId, nodeId);
		buildDGInChildren(builder, containerId);
	}
	
	public void TypeAccess.buildDG(JavaGraphBuilder builder, int containerId){
		int nodeId = buildDGNode(builder);
		builder.addUses(containerId, nodeId);
	}

	public void ParTypeAccess.buildDG(JavaGraphBuilder builder, int containerId){
		int nodeId = buildDGNode(builder);
		builder.addUses(containerId, nodeId);
		buildDGInChildren(builder, containerId);
	}


	static void TypeDecl.addImplements(JavaGraphBuilder builder,
    	int sub, AST.List<Access> implementList){

    	for(Access a : implementList){
    		builder.addIsa(sub, a.buildDGNode(builder));
			a.addImplementsUses(builder, sub);
    	}
	}

	

	void Access.addImplementsUses(JavaGraphBuilder builder, int sub){
		throw new DGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	void TypeAccess.addImplementsUses(JavaGraphBuilder builder, int sub){
		int sn = buildDGNode(builder);
		builder.addUses(sub, sn);
	}

	void ParTypeAccess.addImplementsUses(JavaGraphBuilder builder, int sub){
		getTypeAccess().addImplementsUses(builder, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addImplementsUses(builder, sub);
		}
	}


	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().packageName() == PRIMITIVE_PACKAGE_NAME ||
              compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}


	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();
		for(ConstructorDecl c : ctrs){
			if(c.getParametersAsString().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}
	

	//also present in jrrt-read-only/test/Testing.jrag
	public Program Frontend.getProgram() {
		return program;
	}
}