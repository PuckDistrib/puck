
aspect TypeUser {

	public int Expr.buildTypeUserDGNode(JavaGraphBuilder builder){
		throw new DGBuildingError("Cannot get a primary user from the qualifier : " + this +
                " ("+this.getClass()+")");
	}

    interface TypeMember {
        public TypeDecl hostType();
    }

    Variable extends TypeMember;
    MethodDecl implements TypeMember;

    interface TypeMemberAccess{
        public int buildDGNode(JavaGraphBuilder builder);
        public Expr getQualifier();
        public int buildTypeUserDGNodeFromLeftExpr(JavaGraphBuilder builder);
        public int buildTypeUserDGNode(JavaGraphBuilder builder);
        public TypeMember decl();

    }
    VarAccess implements TypeMemberAccess;
    MethodAccess implements TypeMemberAccess;


    static int Access.buildTypeUserDGNode(TypeMemberAccess access, JavaGraphBuilder builder){
        if(access.getQualifier() == null
            || access.getQualifier().isThisAccess()){
            int selfTypeNode = access.decl().hostType().buildDGNode(builder);
            builder.addUses(selfTypeNode, selfTypeNode);
            return selfTypeNode;
        }
        else if(access.getQualifier().isSuperAccess())
            return access.decl().hostType().buildDGNode(builder);
        else
            return access.buildTypeUserDGNodeFromLeftExpr(builder);
    }

    public int VarAccess.buildTypeUserDGNode(JavaGraphBuilder builder){
        return Access.buildTypeUserDGNode(this, builder);
    }
	public int MethodAccess.buildTypeUserDGNode(JavaGraphBuilder builder){
        return Access.buildTypeUserDGNode(this, builder);
    }
  	
  	class NoTypeUser extends Error {}
	
  public int Access.buildTypeUserDGNodeFromLeftExpr(JavaGraphBuilder builder){
  	Expr lexpr = getLeftExpr();
        
      if(lexpr == null)
        throw new NoTypeUser();
      else
          return lexpr.typeUserFromLeftExpr(builder);
        //return lexpr.buildTypeUserDGNodeOfRightExpr(builder);
  }

  int Expr.typeUserFromLeftExpr(JavaGraphBuilder builder){
        throw new DGBuildingError(this + "(" +this.getClass() + ") in " +
        this.compilationUnit().pathName() +" line " +
        this.location() + " typeUser not found");
  }

  int AddExpr.typeUserFromLeftExpr(JavaGraphBuilder builder){
        System.out.println("AddExpr.typeUserFromLeftExpr(builder)");
        System.out.println("=this.hostBodyDecl().buildDGNode(builder)");
        System.out.println("to check");
        return this.hostBodyDecl().buildDGNode(builder);
  }


  int ClassAccess.typeUserFromLeftExpr(JavaGraphBuilder builder){
        //In SomeRandomClass.class the class keyword is a classAccess
        return this.hostBodyDecl().buildDGNode(builder);
  }



  int MethodAccess.typeUserFromLeftExpr(JavaGraphBuilder builder){
      return decl().buildDGNode(builder);
  }

  int VarAccess.typeUserFromLeftExpr(JavaGraphBuilder builder){
      return decl().buildDGNode(builder);
  }

  //in case of use of static methods, fields ...
  int TypeAccess.typeUserFromLeftExpr(JavaGraphBuilder builder){
        return decl().buildDGNode(builder);
  }

  public int ClassInstanceExpr.typeUserFromLeftExpr(JavaGraphBuilder builder){
       return getAccess().buildDGNode(builder);
  }


  public int ArrayAccess.typeUserFromLeftExpr(JavaGraphBuilder builder){
        //type() it's that simple !
       return type().buildDGNode(builder);
  }

  public int ParExpr.typeUserFromLeftExpr(JavaGraphBuilder builder){
     return getExpr().typeUserFromLeftExpr(builder);
  }

  public int Dot.typeUserFromLeftExpr(JavaGraphBuilder builder){
     if(isRightRotated())
        rotateLeft();
     return getRight().typeUserFromLeftExpr(builder);
  }

  // public int ASTNode.typeUserFromLeftExpr(JavaGraphBuilder builder){
  //   return buildDGNode(builder);
  // }

   public int CastExpr.typeUserFromLeftExpr(JavaGraphBuilder builder){
     return getTypeAccess().buildDGNode(builder);
   }

   public int Literal.typeUserFromLeftExpr(JavaGraphBuilder builder){
     return type().buildDGNode(builder);
   }






}