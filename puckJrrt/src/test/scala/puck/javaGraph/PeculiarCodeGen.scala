package puck.javaGraph

import puck.graph.comparison.Mapping
import puck.{Settings, AcceptanceSpec}

/**
  * Created by lorilan on 04/02/16.
  */
class PeculiarCodeGen extends AcceptanceSpec {
  val examplesPath = Settings.testExamplesPath + "/codeGen"

  feature("Parse lock unlock gen") {

    def makeTest(f : String) : Unit = {
      val _ = new ScenarioFactory(f) {
        val recompiledEx = applyChangeAndMakeExample(graph, Settings.outDir)
        assert( Mapping.equals(graph, recompiledEx.graph) )
      }
    }

    info("tests generated by finding samples of code that required debugging")

    scenario("Anonymous class") {
      makeTest(s"$examplesPath/anonymousClass.java")
    }

    scenario("enum") {
      makeTest(s"$examplesPath/enum.java")
    }

    scenario("inner enum") {
      makeTest(s"$examplesPath/innerEnum.java")
    }

    scenario("method call on anonymous class instantiation") {
      makeTest(s"$examplesPath/anonymousClassInstCall.java")
    }
    scenario("empty interface with comments") {
      makeTest(s"$examplesPath/emptyInterfaceWithComment.java")
    }

    scenario("gen type parameterized with an up-bounded wildcard") {
      makeTest(s"$examplesPath/genTypeUpBound.java")
    }

    scenario("instance initializer") {
      makeTest(s"$examplesPath/instanceInit.java")
    }

    scenario("parameterized class instanciation") {
      makeTest(s"$examplesPath/parClassInstanciation.java")
    }

    scenario("parameterized class subtyping ") {
      makeTest(s"$examplesPath/parClassSubtyping.java")
    }

    scenario("chained call with more than one argument") {
      makeTest(s"$examplesPath/chainedCallWithArgs.java")
    }

    scenario("overloading with variadic method"){
      makeTest(s"${Settings.testExamplesPath}/graphBuilding/variadicMethod/A.java")
    }

    scenario("wild card usage") {
      makeTest(s"$examplesPath/wild.java")
    }

    scenario("chained call in static context") {
      makeTest(s"$examplesPath/chainedCallInStaticContext.java")
    }

    scenario("implicit constructor") {
      makeTest(s"$examplesPath/implicitConstructor.java")
    }
  }

}
