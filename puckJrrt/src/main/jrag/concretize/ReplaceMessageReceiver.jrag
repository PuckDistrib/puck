import AST.MethodDecl;
import AST.VarAccess;

aspect ReplaceMessageReceiver {

    public void ASTNode.replaceMessageReceiver(MemberDecl messageSend, Variable oldReceiver, Variable newReceiver){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceMessageReceiver(messageSend, oldReceiver, newReceiver);
    }

    public void MethodAccess.replaceMessageReceiver(MemberDecl messageSend, Variable oldReceiver, Variable newReceiver){
        if(this.decl() == messageSend){
            if(!(getQualifier() == null || getQualifier().isThisAccess())
                 &&  getQualifier().doesAccessToVariable(oldReceiver) ) {
                replace(getQualifier()).with(newReceiver.createLockedAccess());
            }
        }
    }


    public void ASTNode.replaceAllMessageReceiver(MemberDecl messageSend, Variable newReceiver){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceAllMessageReceiver(messageSend, newReceiver);
    }

    public void MethodAccess.replaceAllMessageReceiver(MemberDecl messageSend, Variable newReceiver){
        if(this.decl() == messageSend){
            if(getQualifier() == null || getQualifier().isThisAccess())
                replace(this).with(new Dot(newReceiver.createLockedAccess(), this));
            else
                replace(getQualifier()).with(newReceiver.createLockedAccess());
        }
    }

    public boolean Expr.doesAccessToVariable(Variable oldReceiver){
        return false;
    }

    public boolean Dot.doesAccessToVariable(Variable oldReceiver){
        if(isRightRotated())
            rotateLeft();
        return getRight().doesAccessToVariable(oldReceiver);
    }

    public boolean VarAccess.doesAccessToVariable(Variable oldReceiver){
        return decl() == oldReceiver;
    }

}