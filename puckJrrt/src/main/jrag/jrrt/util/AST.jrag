import static org.extendj.ast.ASTNode.mandatoryAssert;
aspect AST {

	public static void ASTNode.mandatoryAssert(boolean test){
		if(!test)
			throw new AssertionError();
	}

	public static String ASTNode.unCapitalise(String s) {
		return Character.toLowerCase(s.charAt(0)) + s.substring(1);
	}
	
	syn String FieldDeclarator.capitalisedName() = Character.toUpperCase(name().charAt(0))+name().substring(1);
	
	public static Object ASTNode.epsilon(SimpleSet set, Object alt) {
		if(set.size() == 1)
			return set.iterator().next();
		return alt;
	}
	
	public ASTNode ASTNode.getParent(int i) {
		if(i <= 0)
			return this;
		if(getParent() == null)
			return null;
		return getParent().getParent(i-1);
	}
	
	public int ASTNode.getChildIndex() {
		return getParent().getIndexOfChild(this);
	}
	
	public void ASTNode.removeChild(ASTNode child) {
		removeChild(getIndexOfChild(child));
	}
	
	public ASTNode<T> ASTNode.fullCopyAndDetach() {
		ASTNode<T> node = fullCopy();
		//node.parent = null;
		return node;
	}
	

	public BodyDecl ASTNode.hostBodyDecl() {
		ASTNode n=this;
		while(n!=null && !(n instanceof BodyDecl))
			n=n.getParent();
		return (BodyDecl)n;
	}

	syn lazy boolean ASTNode.fromSource() {
		CompilationUnit cu = compilationUnit();
		return cu == null ? false : cu.fromSource(); 
	}
	
	public boolean Stmt.isInBlock() {
		return getParent() != null && getParent().getParent() instanceof Block;
	}
	
	public void TypeDecl.removeBodyDecl(BodyDecl bd) {
		getBodyDeclList().removeChild(getBodyDeclList().getIndexOfChild(bd));
	}

	protected ASTNode ASTNode.replaceWith(ASTNode newnode) {
		return replace(this).with(newnode);
	}
	
	protected void Access.qualifyWith(Expr qual) {
		ASTNode parent = getParent();
		int idx = parent.getIndexOfChild(this);
		parent.setChild(qual.qualifiesAccess(this), idx);
	}


	public boolean ASTNode.isInTree() {
		ASTNode node = this;
		while (node.getParent() != null && node.getChildIndex() != -1)
			node = node.getParent();
		return node instanceof Program;
	}

	public Opt<Expr> Access.qualifierOpt(){
		Opt<Expr> squal = new Opt<>();
		if(isQualified())
			squal.wrap(qualifier());

		return squal;
	}
	public T Opt.get(){
		return getChild(0);
	}
	//setChild() remove the old parent relationship the node might have
	public void Opt.wrap(T t){
		if(children==null)
			children = new ASTNode[1];
		children[0] = t;
	}
	public boolean Opt.nonEmpty(){
		return !isEmpty();
	}
}