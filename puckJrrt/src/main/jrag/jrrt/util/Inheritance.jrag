aspect Inheritance {
	// collect all children of a type declaration A, i.e. all types B that extend A or one of its parameterizations
	coll Collection<TypeDecl> TypeDecl.childTypes() circular [new HashSet<TypeDecl>()] 
	                                                         with add root Program;
	ClassDecl contributes this when hasSuperclass()
	to TypeDecl.childTypes() for superclass().sourceTypeDecl();
	
	ClassDecl contributes this
	to TypeDecl.childTypes() for each interfacesSourceDecls();
	
	InterfaceDecl contributes this
	to TypeDecl.childTypes() for each interfacesSourceDecls();

	Collection<TypeDecl> TypeDecl.interfacesSourceDecls(){
		Collection<TypeDecl> tds = new LinkedList<TypeDecl>();
		for(TypeDecl i : superInterfaces())
			tds.add(i.sourceTypeDecl());

		return tds;
	}

}