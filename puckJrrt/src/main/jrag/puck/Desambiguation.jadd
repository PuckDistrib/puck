
aspect Desambiguation{

	public DGNamedElement ASTNode.getParentNamedNode_aux(){
		if(getParent() == null)
			throw new PuckError("no parent named node !");
		return getParent().getParentNamedNode_aux();
	}

	public DGNamedElement DGNamedElement.getParentNamedNode_aux(){
		return this;
	}

	public DGNamedElement ASTNode.getParentNamedNode(){
		return getParent().getParentNamedNode_aux();
	}

	public String TypeDecl.dgFullName() {
		if (isNestedType())
			return getParentNamedNode().dgFullName() + "." + getID();

		String packageName = packageName();
		if (packageName.equals(""))
			return getID();

		return packageName + "." + getID();
	}

	public String TypeVariable.dgFullName(){
		return getParentNamedNode().dgFullName() + "@" + getID();
	}

	public String Callable.dgFullName(){
		return hostType().dgFullName()+"."+name()
				+ getParametersAsString();
	}

	public String MethodDecl.fullName(){
		return dgFullName();
	}

	public String FieldDeclarator.dgFullName(){
		return hostType().dgFullName()+"."+name();
	}

	public String ParameterDeclaration.dgFullName(){
		return getParentNamedNode().dgFullName()+"."+name();
	}
	public String AnonymousDecl.dgFullName(){
		return getParentNamedNode().dgFullName() + "." + name();
	}

	public String EnumConstant.dgFullName(){
		return getParentNamedNode().dgFullName() + "." + name();
	}



	Callable extends TypeMember;

	public String Callable.getParametersAsString(){

		StringBuilder stringParameters = new StringBuilder();
		stringParameters.append("(");
		List<ParameterDeclaration> params = getParameterList();
		if(params.getNumChild() > 0){
			for(int i = 0; i< params.getNumChild() - 1; i++){
				ParameterDeclaration pdecl = params.getChild(i);
				stringParameters.append(pdecl.typeNameInSig());
				stringParameters.append(",");
			}
			ParameterDeclaration pdecl = params.getChild(params.getNumChild()-1);
			stringParameters.append(pdecl.typeNameInSig());
		}
		stringParameters.append(")");

		return stringParameters.toString();
	}

	public String ParameterDeclaration.typeNameInSig(){
		if(getTypeAccess() instanceof ParTypeAccess){
			ParTypeAccess pta = (ParTypeAccess) getTypeAccess();
			return pta.genericDecl().getID();
		}
		return type().name();
	}

}
