
aspect Desambiguation{

	String ParTypeAccess.typeArgumentListString(){
	  StringBuilder sb = new StringBuilder();

	  sb.append("<");
	  for(int i = 0; i < getNumTypeArgument(); i++) {
		  if(i != 0)
			  sb.append(", ");
		  
		  if(getTypeArgument(i) instanceof Wildcard)
              sb.append("?");
          else
		    sb.append(((TypeAccess)getTypeArgument(i)).fullName());
	  }

	  sb.append(">");

	  return sb.toString();
  	}

	public String ParTypeAccess.name(){
	//	return ((TypeAccess)getTypeAccess()).name() + typeArgumentListString();
		return genericDecl().name();
	}


	public class FullNameException extends Error {
		private ASTNode<?> node;
		
		public FullNameException(ASTNode<?> node){
			this.node = node;
		}
		
		public ASTNode<?> getNode(){
			return node;
		}
	}
	
	public class ProgramRootFullNameException extends FullNameException {
		public ProgramRootFullNameException(ASTNode<?> node){
			super(node);
		}
	}

	public String ASTNode.fullName(){
		throw new FullNameException(this);
	}

	public String Program.fullName(){
		throw new ProgramRootFullNameException(this);
	}


    public String TypeAccess.fullName(){
    	return decl().fullName();
    }

	public String ArrayTypeAccess.fullName(){
    	return getAccess().fullName()+"[]";
    }
	
	public String ParTypeAccess.fullName(){
		return genericDecl().fullName();
    }

	public String ConstructorDecl.fullName(){
		return getDesambiguateFullName();
	}
	public String MethodDecl.fullName(){
		return getDesambiguateFullName();
	}

	public String FieldDecl.fullName(){
		//TODO seem strange, check if correct
		String fullName="";
		List<VariableDecl> vdl = getVariableDeclList();
		for (VariableDecl vd : vdl) {
			fullName+= hostType().typeName()+"."+vd.name();
		}
		return fullName;
	}
	
	public String FieldDeclaration.fullName(){
		return hostType().typeName()+"."+name();
	}

	public String VariableDecl.fullName(){ //should it have a fullName ??
		return hostBodyDecl().fullName()+"."+name();
	}

	public String ParameterDeclaration.fullName(){
		return hostBodyDecl().fullName()+"."+name();
	}
	public String AnonymousDecl.fullName(){
		return hostBodyDecl().fullName() + "." + name();
	}

	public String InstanceInitializer.fullName(){
		return hostType().typeName()+".InstanceInitializer";//add an id number ??
	}
	public String StaticInitializer.fullName(){
		return hostType().typeName()+".StaticInitializer";//add an id number ??
	}

	
	
	public boolean ASTNode.isInScope(String scope){
		return fullName().contains(scope);
	}
	
    Callable extends TypeMember;

	public String Callable.getParametersAsString(){
    	
    	StringBuilder stringParameters = new StringBuilder();
    	stringParameters.append("(");
		List<ParameterDeclaration> params = getParameterList();
		if(params.getNumChild() > 0){
			for(int i = 0; i< params.getNumChild() - 1; i++){
				ParameterDeclaration pdecl = params.getChild(i);
				stringParameters.append(pdecl.type().name());
				stringParameters.append(",");
			}
		//		String[] splitName = pdecl.type().fullName().split("[.]");
		//		stringParameters.append(splitName[splitName.length-1]);
			ParameterDeclaration pdecl = params.getChild(params.getNumChild()-1);
			stringParameters.append(pdecl.type().name());
		}
    	stringParameters.append(")");

		return stringParameters.toString();
    }

    public String Callable.getDesambiguateFullName(){

    	return hostType().typeName()+"."+name()
    		    + getParametersAsString();
    }
}