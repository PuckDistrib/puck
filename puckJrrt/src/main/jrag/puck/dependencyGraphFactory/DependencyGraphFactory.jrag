/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

import puck.graph.IsaEdge;
import puck.graph.Uses;
import puck.graph.UsesAccessKind;
import puck.LoadingListener;
import puck.graph.DGBuildingError;

aspect DependencyGraphFactory {

	public String ASTNode.fullLocation(){
		return compilationUnit().pathName() + " line " + location();
	}

	void ASTNode.buildDGInChildren(JastaddGraphBuilder builder, int containerId){
		for(int i=0; i< getNumChild(); i++){
			getChild(i).buildDG(builder, containerId);
		}
	}

	public void ASTNode.buildDG(JastaddGraphBuilder builder, int containerId){
		//System.err.println(this.getClass() + ".buildDG() : " + getNumChild() +" children");
		buildDGInChildren(builder, containerId);
	}

	public void CompilationUnit.buildDependencyGraph(JastaddGraphBuilder builder){
		for(ImportDecl id : getImportDecls()){
			id.lockAllNames();
		}

		int packageNode = builder.addPackage(getPackageDecl(), true);

		for (TypeDecl td : getTypeDecls()){
			builder.buildDG(packageNode, td);
		}
	}

	public void ImportDecl.lockTypeAccess(){
		Access a = getAccess();
		if(a instanceof AbstractDot){
			AbstractDot ad = (AbstractDot) a;

			ad.getRight().lock();
		}
	}

	public int DGNamedElement.buildDef(JastaddGraphBuilder builder, int thisDeclId){
		return builder.buildDef(this, getBody(), thisDeclId);
	}

	public int ConstructorDecl.buildDef(JastaddGraphBuilder builder, int thisDeclId){
		int defId = builder.buildDef(this, getBody(), thisDeclId);

		//implicit call to super() where the super constructor
		//is also implicitly generated lead to an unknown constructor
		ConstructorAccess otherCtor=getConstructorAccess();
		if(otherCtor.decl()!=program().unknownConstructor()
				&& otherCtor.decl().hostType()!=program().typeObject())
			otherCtor.buildDG(builder, defId);

		return defId;
	}

	public void MemberInterfaceDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		getInterfaceDecl().buildDG(builder, hostTypeDeclId);
	}
	public void MemberClassDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		getClassDecl().buildDG(builder, hostTypeDeclId);
	}

	interface Buildable { }

	//method generated in each subclass, hence achieving the double dispatch
	public void Buildable.buildDG(JastaddGraphBuilder builder, int containerId){
			builder.buildDG(containerId, this);
	}

	AssignExpr implements Buildable;
	ConstructorAccess implements Buildable;
	ClassInstanceExpr implements Buildable;
	EnhancedForStmt implements Buildable;
	FieldDecl implements Buildable;
	MethodDecl implements Buildable;
	ConstructorDecl implements Buildable;
	MethodAccess implements Buildable;
	ParameterDeclaration implements Buildable;
	ParTypeAccess implements Buildable;
	ReturnStmt implements Buildable;
	TypeDecl implements Buildable;
	TypeAccess implements Buildable;
	VarAccess implements Buildable;
	VarDeclStmt implements Buildable;


	public void EnumConstant.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		int thisNode = builder.getNode(this);
		builder.addContains(hostTypeDeclId, thisNode);
		builder.setType(thisNode, builder.getType(this.hostType()));
	}


	public void BodyDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		if(this.getClass() == InstanceInitializer.class
				|| this.getClass() == StaticInitializer.class
				|| this.getClass() == DocAnnotation.class) {
			super.buildDG(builder, hostTypeDeclId);
		}
		else
			System.err.println("TODO !! "+ this.getClass() +".buildDG(JastaddGraphBuilder, int)");

	}

	public void GenericMethodDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ) {
		super.buildDG(builder, hostTypeDeclId);
		int thisNode = builder.buildNode((DGNamedElement)this);
		for(TypeVariable tv : typeParameters()){
			int tvNode = builder.buildNode(tv);
			builder.addContains(thisNode, tvNode);
		}
	}

	public SimpleSet<MethodDecl> MethodAccess.decls_keepMethodsInDifferentTypeHierarchy(){
		SimpleSet<MethodDecl> decls = decls();
		if(decls.isSingleton())
			return decls;

		SimpleSet<MethodDecl> keeped = ASTNode.emptySet();
		for(MethodDecl decl : decls){
			boolean keep = true;
			for(MethodDecl d : decls) {
				if(d != decl &&
						d.hostType().subtype(decl.hostType())) {
					keep = false;
					break;
				}
			}
			if(keep)
				keeped = keeped.add(decl);
		}
		return keeped;
	}

	syn boolean ASTNode.isAbstractDot();
	eq ASTNode.isAbstractDot() = false;
	eq AbstractDot.isAbstractDot() = true;

	public void AbstractDot.buildDG(JastaddGraphBuilder builder, int containerId){
		if( (getRight() instanceof PotentialStaticDeclAccess)
				&& ((PotentialStaticDeclAccess) getRight()).isDeclStatic()){
			getRight().buildDG(builder, containerId);
			getLeft().lockAllNames();
		}
		else
			buildDGInChildren(builder, containerId);
	}

	public void Access.buildDG(JastaddGraphBuilder builder, int containerId){
		if( this.getClass() != ThisAccess.class
				&& this.getClass() != SuperAccess.class
				&& this.getClass() != ClassAccess.class
				&& this.getClass() != Wildcard.class
				&& this.getClass() != WildcardExtends.class )
			System.err.println("TODO !! "+this.getClass()+".buildDG : " + this);
		super.buildDG(builder, containerId);
	}

	public void ArrayAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		int nodeId = builder.buildNode(this);
		builder.addUses(containerId, nodeId);
		buildDGInChildren(builder, containerId);
	}


	void Access.addImplementsUses(JastaddGraphBuilder builder, int sub) {
		throw new DGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	boolean TypeDecl.isFromStdLib(){
		return compilationUnit().packageName() == PRIMITIVE_PACKAGE_NAME ||
				compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}

	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();

		for(ConstructorDecl c : ctrs){
			//if(c.getParametersAsString().equals(paramsDescr)){
			if(c.signature().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}


	public Program Frontend.getProgram() {
		return program;
	}

}