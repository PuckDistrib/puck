import puck.jastadd.JastaddGraphBuilder;
import puck.graph.Isa;
import puck.graph.Uses;
import puck.graph.UsesAccessKind;
import puck.LoadingListener;

aspect DependencyGraphFactory {

	public JastaddGraphBuilder Program.buildDependencyGraph(LoadingListener ll){

		JastaddGraphBuilder builder = new JastaddGraphBuilder(this);

		if(ll == null)
            ll = new LoadingListener(){ public void update(double loading){}};

		build(builder, ll);

		return builder;
	}

	void PrimitiveCompilationUnit.addPrimitiveTypes(JastaddGraphBuilder builder){
		builder.addApiTypeNodeAndRegister(typeBoolean());
		builder.addApiTypeNodeAndRegister(typeByte());
		builder.addApiTypeNodeAndRegister(typeShort());
		builder.addApiTypeNodeAndRegister(typeChar());
		builder.addApiTypeNodeAndRegister(typeInt());
		builder.addApiTypeNodeAndRegister(typeLong());
		builder.addApiTypeNodeAndRegister(typeFloat());
		builder.addApiTypeNodeAndRegister(typeDouble());
		builder.addApiTypeNodeAndRegister(typeVoid());
		builder.addApiTypeNodeAndRegister(typeNull());
	}

    public int Program.getNumCuFromSources(){
        int i =0;
        for (CompilationUnit cu : (List<CompilationUnit>)getCompilationUnitList()){
            if(cu.fromSource())
            i++;
        }
        return i;
    }

	private void Program.build(JastaddGraphBuilder builder, LoadingListener ll){
		double nchild = getCompilationUnitList().getNumChild(); //getNumCuFromSources();
		double d = 0.0;
		getPrimitiveCompilationUnit().addPrimitiveTypes(builder);

//		for(CompilationUnit cu : libraryCompilationUnitSet){
//			cu.buildDependencyGraph(builder);
//			d++;
//			ll.update(d/nchild);
//		}

		for (CompilationUnit cu : getCompilationUnitList()){
			cu.buildDependencyGraph(builder);
			d++;
			ll.update(d/nchild);
		}
		ll.update(1);
	}


	void ASTNode.buildDGInChildren(JastaddGraphBuilder builder, int containerId){
		for(int i=0; i< getNumChild(); i++){
			getChild(i).buildDG(builder, containerId);
		}
	}

	public void ASTNode.buildDG(JastaddGraphBuilder builder, int containerId){
		//System.err.println(this.getClass() + ".buildDG() : " + getNumChild() +" children");
		buildDGInChildren(builder, containerId);
	}	

	public void CompilationUnit.buildDependencyGraph(JastaddGraphBuilder builder){
			for(ImportDecl id : getImportDecls()){
				id.lockAllNames();
				//id.lockTypeAccess();
			}

			int packageNode = builder.addPackage(getPackageDecl(), true);

			for (TypeDecl td : getTypeDecls()){
				td.buildDG(builder, packageNode);
			}
	}

	public void ImportDecl.lockTypeAccess(){
		Access a = getAccess();
		if(a instanceof AbstractDot){
			AbstractDot ad = (AbstractDot) a;
			if(ad.isRightRotated())
				ad.rotateLeft();

			ad.getRight().lock();
		}
	}
	public void TypeDecl.buildDG(JastaddGraphBuilder builder, int containerId){
		
		int tdNode = buildDG_TypeDecl(builder);
		builder.addContains(containerId, tdNode);

        if(isParameterizedType()){
            ParTypeDecl parTypeDecl = (ParTypeDecl) this;
            System.out.println("[BUILD] parameterized type " + parTypeDecl.nameWithArgs());
        }

        for (BodyDecl bd : getBodyDeclList()) {
			bd.buildDG(builder, tdNode);
		}
	}


	int TypeDecl.buildDG_TypeDecl(JastaddGraphBuilder builder){
		throw new DGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}

	void ClassDecl.addExtends(JastaddGraphBuilder builder, int thisId){
		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			builder.addIsa(thisId, getSuperClass().buildDGNode(builder));

			getSuperClass().buildIsaEdges(builder, thisId);
		}
	}

	int TypeVariable.buildDG_TypeDecl(JastaddGraphBuilder builder){
		return buildDGNode(builder);
	}

	public void GenericTypeDecl.buildDG_TypeParameters(JastaddGraphBuilder builder, int thisId){
		for(TypeVariable tv: getTypeParameterList()){
			int nodeId = tv.buildDGNode(builder);
			builder.addContains(thisId, nodeId);
		}
	}

	int ClassDecl.buildDG_TypeDecl(JastaddGraphBuilder builder){
		int nodeId = buildDGNode(builder);

		addExtends(builder, nodeId);

		TypeDecl.addImplements(builder, nodeId, getImplementss());

		return nodeId;
	}

	int InterfaceDecl.buildDG_TypeDecl(JastaddGraphBuilder builder){
		int agNode = buildDGNode(builder);

		TypeDecl.addImplements(builder, agNode, getSuperInterfaces());

		return agNode;
	}

	public int GenericTypeDecl.buildDG_TypeDecl(JastaddGraphBuilder builder){
		int nodeId = super.buildDG_TypeDecl(builder);
		buildDG_TypeParameters(builder, nodeId);
		return nodeId;
	}


	public static int BodyDecl.buildDef(JastaddGraphBuilder builder,
		DGNamedElement defOwner,
		Block def,
		int defOwnerId){
		int defId = builder.getDefNode(defOwner);
		def.registerDef(builder, defId);
		builder.addContains(defOwnerId, defId);
		def.buildDG(builder, defId);
		return defId;

	}
	public int DGNamedElement.buildDef(JastaddGraphBuilder builder, int thisDeclId){
		return BodyDecl.buildDef(builder, this, getBody(), thisDeclId);
	}


	public int ConstructorDecl.buildDef(JastaddGraphBuilder builder, int thisDeclId){
		int defId = BodyDecl.buildDef(builder, this, getBody(), thisDeclId);

		ConstructorAccess otherCtor = getConstructorAccess();
		if(otherCtor.decl().hostType() != program().typeObject())
			otherCtor.buildDG(builder, defId);

		return defId;
	}

  public void FieldDeclarator.buildInit(JastaddGraphBuilder builder, int thisDeclId){
        Expr def = getInit();
		int defId = builder.getDefNode(this);
        def.registerDef(builder, defId);
        builder.addContains(thisDeclId, defId);
        def.buildDG(builder, defId);
  }


  public void ParameterDeclaration.buildDG(JastaddGraphBuilder builder, int containerId){
		int thisID = buildDGNode(builder);
		buildDGInChildren(builder, thisID);
  }

	public void ConstructorAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		int thisID = buildDGNode(builder);
		builder.addEdge(new Uses(containerId, thisID, UsesAccessKind.none()));
		buildDGInChildren(builder, containerId);
	}

	public void MemberInterfaceDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		getInterfaceDecl().buildDG(builder, hostTypeDeclId);
	}
	public void MemberClassDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		getClassDecl().buildDG(builder, hostTypeDeclId);
	}

	public void FieldDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		puck.graph.Type t = builder.getType(getTypeAccess());
		for(FieldDeclarator fd : this.getDeclarators()){
			int fdId = fd.buildDGNode(builder);
			builder.addContains(hostTypeDeclId, fdId);
			builder.setType(fdId, t);
			if(fd.hasInit())
				fd.buildInit(builder, fdId);
		}
	}
	public void EnumConstant.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		int thisNode = builder.getNode(this);
		builder.addContains(hostTypeDeclId, thisNode);
		builder.setType(thisNode, builder.getType(this.hostType()));
	}



	public void DGNamedElement.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
			int declId = buildDGNode(builder);
			builder.addContains(hostTypeDeclId, declId);

			buildDGType(builder, declId);

			if(hasDefinition()){
				for(int i=0; i< getNumChild(); i++)
					if( i != getDefIndex()
							&& i != getParamIndex()
							&& i != getReturnTypeIndex() )
						getChild(i).buildDG(builder, declId);

				buildDef(builder, declId);
			}
			else{
				for(int i=0; i<getNumChild(); i++)
					if( i !=getParamIndex()
							&& i != getReturnTypeIndex() )
						getChild(i).buildDG(builder, declId);
			}
	}

	public void WildcardSuperType.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){}
	public void WildcardExtendsType.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){}


	public void BodyDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ){
		if(this.getClass() == InstanceInitializer.class
			|| this.getClass() == StaticInitializer.class
            || this.getClass() == DocAnnotation.class) {
			super.buildDG(builder, hostTypeDeclId);
		}
		else
			System.err.println("TODO !! "+ this.getClass() +".buildDG(JastaddGraphBuilder, int)");

	}

	public void GenericMethodDecl.buildDG(JastaddGraphBuilder builder, int hostTypeDeclId ) {
		super.buildDG(builder, hostTypeDeclId);
		int thisNode = buildDGNode(builder);
		for(TypeVariable tv : typeParameters()){
		int tvNode = tv.buildDGNode(builder);
		builder.addContains(thisNode, tvNode);
		}
	}

	static void Access.buildDG(TypeMemberAccess access, int containerId,
        scala.Option<UsesAccessKind> accK, JastaddGraphBuilder builder){
		int nodeId = access.buildDGNode(builder);

		Uses typeMemberUses = new Uses(containerId, nodeId, accK);
		builder.addEdge(typeMemberUses);

		if(!access.isDeclStatic())
			buildTypeUse(builder, access, typeMemberUses);
	}

	public void MethodAccess.buildDG(JastaddGraphBuilder builder, int containerId){

		buildDG(this, containerId, UsesAccessKind.none(), builder);

		for(Expr e : getArgList()){
			e.buildDG(builder, containerId);
		}
	}

	public void VarAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		if(decl().isField()){
            buildDG(this, containerId, usesAccessKind(), builder);
		}
	}
	
	public void ClassInstanceExpr.buildDG(JastaddGraphBuilder builder, int containerId){
		//System.err.println("ClassInstanceExpr.buildDG : " + this);

		getArgList().buildDG(builder, containerId);
		getTypeDeclOpt().buildDG(builder, containerId);

		//getAccess().accessed().buildDGNode avoid lock
		int classNodeId = getAccess().accessed().buildDGNode(builder);
		int ctorNodeId = buildDGNode(builder);//does lock
		if(hasTypeDecl())
			setTarget(null);//unlock anonymous decl

		Uses constructorUses = new Uses(containerId, ctorNodeId, UsesAccessKind.none());
		builder.addEdge(constructorUses);


	}

	syn boolean ASTNode.isAbstractDot();
	eq ASTNode.isAbstractDot() = false;
	eq AbstractDot.isAbstractDot() = true;

	public Expr Access.getLeftExpr(){
		if(!getParent().isAbstractDot())
			return null;
		
		AbstractDot parent = (AbstractDot) getParent();
		Expr lsibling = parent.getLeft();
		
		if(lsibling == this) //already leftmost child
			return null;
		
		if(lsibling.isAbstractDot())
			return ((AbstractDot)lsibling).getRight();
		
		return lsibling;
	}

	public void AbstractDot.buildDG(JastaddGraphBuilder builder, int containerId){
		if(isRightRotated())
			rotateLeft();

		if( (getRight() instanceof PotentialStaticDeclAccess)
			&& ((PotentialStaticDeclAccess) getRight()).isDeclStatic())
			getRight().buildDG(builder,containerId);
		else
			buildDGInChildren(builder, containerId);
	}

	public void Access.buildDG(JastaddGraphBuilder builder, int containerId){
		if( this.getClass() != ThisAccess.class
			&& this.getClass() != SuperAccess.class
			&& this.getClass() != ClassAccess.class
			&& this.getClass() != Wildcard.class
			&& this.getClass() != WildcardExtends.class )
			System.err.println("TODO !! "+this.getClass()+".buildDG : " + this);
		super.buildDG(builder, containerId);
	}

	public void ArrayAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		int nodeId = buildDGNode(builder);
		builder.addEdge(new Uses(containerId, nodeId, UsesAccessKind.none()));
		buildDGInChildren(builder, containerId);
	}
	
	public void TypeAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		int nodeId = buildDGNode(builder);
		builder.addEdge(new Uses(containerId, nodeId, UsesAccessKind.none()));
	}


	public void ParTypeAccess.buildDG(JastaddGraphBuilder builder, int containerId){
		builder.buildDG(this, containerId);
		buildDGInChildren(builder, containerId);
	}

	public ASTNode ParTypeAccess.lock() {
		ASTNode l = getTypeAccess().lock();
		for(Access a : getTypeArguments())
			a.lock();

		return this;
	}
//public void ParTypeAccess.buildDG(JastaddGraphBuilder builder, int containerId){
//		int nodeId = buildDGNode(builder);
//		builder.addEdge(new Uses(containerId, nodeId, UsesAccessKind.none()));
//		buildDGInChildren(builder, containerId);
//	}

	static void TypeDecl.addImplements(JastaddGraphBuilder builder,
    	int sub, List<Access> implementList){

    	for(Access a : implementList){
			a.buildIsaEdges(builder, sub);
    	}
	}

	void Access.buildIsaEdges(JastaddGraphBuilder builder, int sub){
		throw new DGBuildingError(
		this.compilationUnit().pathName() /*+ " line " + this.getLocation()*/ +
		this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}

	void AbstractDot.buildIsaEdges(JastaddGraphBuilder builder, int sub){
		if(!isRightRotated())
			rotateRight();

		getRight().buildIsaEdges(builder, sub);
	}

	void TypeAccess.buildIsaEdges(JastaddGraphBuilder builder, int sub) {
		builder.addEdge(JastaddGraphBuilder.isa(sub, buildDGNode(builder)));
//		int sn = buildDGNode(builder);
//		builder.addEdge(new Uses(sub, sn, UsesAccessKind.none()));
	}

	void ParTypeAccess.buildIsaEdges(JastaddGraphBuilder builder, int sub){
		getTypeAccess().buildIsaEdges(builder, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addImplementsUses(builder, sub);
		}
	}

	void Access.addImplementsUses(JastaddGraphBuilder builder, int sub) {
		throw new DGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}
	void AbstractDot.addImplementsUses(JastaddGraphBuilder builder, int sub){
		if(!isRightRotated())
			rotateRight();

		getRight().addImplementsUses(builder,sub);
	}

	void TypeAccess.addImplementsUses(JastaddGraphBuilder builder, int sub){
		int sn = buildDGNode(builder);
		builder.addEdge(new Uses(sub, sn, UsesAccessKind.none()));
	}

	void ParTypeAccess.addImplementsUses(JastaddGraphBuilder builder, int sub){
		getTypeAccess().addImplementsUses(builder, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addImplementsUses(builder, sub);
		}
	}
	void Wildcard.addImplementsUses(JastaddGraphBuilder builder, int sub){}
	void WildcardSuper.addImplementsUses(JastaddGraphBuilder builder, int sub){
		int sn = getAccess().buildDGNode(builder);
		builder.addEdge(new Uses(sub, sn, UsesAccessKind.none()));
	}
	void WildcardExtends.addImplementsUses(JastaddGraphBuilder builder, int sub){
		int sn = getAccess().buildDGNode(builder);
		builder.addEdge(new Uses(sub, sn, UsesAccessKind.none()));
	}

	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().packageName() == PRIMITIVE_PACKAGE_NAME ||
              compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}



	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();

		for(ConstructorDecl c : ctrs){
			if(c.getParametersAsString().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}
	

	//also present in jrrt-read-only/test/Testing.jrag
	public Program Frontend.getProgram() {
		return program;
	}


//	public void VarDeclStmt.buildDG(JastaddGraphBuilder builder, int containerId){
//		getTypeAccess().lock();
//		super.buildDG(builder, containerId);
//	}
}