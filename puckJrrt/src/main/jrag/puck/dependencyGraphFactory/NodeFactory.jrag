/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

aspect NodeFactory  {

	public int DGNamedElement.buildDGNode(JastaddGraphBuilder builder){
		if(isSubstitute())
			return builder.getNode((DGNamedElement)((Substitute) this).getOriginal());
		else
			return builder.getNode(this);

	}
	public int ParameterDeclaration.buildDGNode(JastaddGraphBuilder builder){
		if(this.getParent() instanceof CatchClause){
			//not a parameter but a var decl in a catch clause
			return hostBodyDecl().buildDGNode(builder);
		}
		return builder.getNode(this);
	}

//	public static int ASTNode.buildDGNode(JastaddGraphBuilder builder,
//										  DGNamedElement namedElement){
//		try {
//			return builder.getNodeByName(namedElement.fullName());
//		}
//		catch(NoSuchElementException e){
//			int node = builder.addNode(namedElement.fullName(), namedElement.name(),
//					namedElement.getDGNodeKind(), namedElement.fromSource());
//
//			namedElement.registerNode(builder, node);
//			return node;
//		}
//	}

	public int ASTNode.throwBuildDGNodeError(){
		throw new DGBuildingError(this + " (" + this.getClass()+ ") in "+ this.hostBodyDecl() +
				" in " + this.compilationUnit().pathName() +
				" does not know how to create an DG Node");
	}

//	public static int ASTNode.buildDefNode(JastaddGraphBuilder builder,
//										   ASTNode namedElement){
//		String defFullName = namedElement.fullName() + "." +
//				JastaddGraphBuilder.definitionName();
//		return builder.addNode(defFullName,
//					JastaddGraphBuilder.definitionName(),
//					JastaddGraphBuilder.definition(),
//					namedElement.fromSource());
//	}

	public int ASTNode.buildDGNode(JastaddGraphBuilder builder){
		return throwBuildDGNodeError();
	}
	public int AbstractWildcardType.buildDGNode(JastaddGraphBuilder builder){
		if(isNamedElement())
			return super.buildDGNode(builder);
		return throwBuildDGNodeError();
	}

	public int ArrayDecl.buildDGNode(JastaddGraphBuilder builder){
		return builder.arrayTypeId();
	}

    public int ParClassDecl.buildDGNode(JastaddGraphBuilder builder){
        return genericDecl().buildDGNode(builder);
    }

    public int ParInterfaceDecl.buildDGNode(JastaddGraphBuilder builder){
        return genericDecl().buildDGNode(builder);
    }

    public int Access.buildDGNode(JastaddGraphBuilder builder){
        if(!isSubstitute())
			this.lock();

        return accessed().buildDGNode(builder);
    }

    private ASTNode Access.undefinedAccessed(){
		throw new Error(this.prettyPrint() + "- " + this.compilationUnit().pathName()+ " line "+ this.location() +" - " +
		this.getClass() + " : accessed not implemented");
    }

    syn ASTNode Access.accessed();
    eq Access.accessed() = undefinedAccessed();
    eq ClassAccess.accessed() = type();
    eq ArrayAccess.accessed() = type();
    eq SuperConstructorAccess.accessed() = decl();
    eq ClassInstanceExpr.accessed() = decl();
    eq TypeAccess.accessed() = decl();
	//eq ParTypeAccess.accessed() = ((TypeAccess)getTypeAccess()).decl();
    eq ParTypeAccess.accessed() = type();
    eq MethodAccess.accessed() = decl();
	eq ConstructorAccess.accessed() = decl();
	eq VarAccess.accessed() = (ASTNode)decl();


	public ASTNode Dot.accessed(){
		if(isRightRotated())
			rotateLeft();

		return getRight().accessed();
	}

	public int VariableDeclarator.buildDGNode(JastaddGraphBuilder builder){
		if(hostBodyDecl() instanceof StaticInitializer ||
			hostBodyDecl()instanceof InstanceInitializer)
			return hostBodyDecl().buildDGNode(builder);

		return builder.getDefinition(hostBodyDecl().buildDGNode(builder));
	}

	public int InstanceInitializer.buildDGNode(JastaddGraphBuilder builder){
		return hostType().buildDGNode(builder);
	}

	public int StaticInitializer.buildDGNode(JastaddGraphBuilder builder){
		return hostType().buildDGNode(builder);
	}

	public int ParExpr.buildDGNode(JastaddGraphBuilder builder){
		return getExpr().buildDGNode(builder);
	}

	public int Dot.buildDGNode(JastaddGraphBuilder builder){
		if(isRightRotated())
			rotateLeft();

		return getRight().buildDGNode(builder);
	}

	

}