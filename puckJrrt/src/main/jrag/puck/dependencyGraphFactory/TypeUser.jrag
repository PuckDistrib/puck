aspect TypeUser {

    interface TypeMember {
        public TypeDecl hostType();
        public String name();

    }

    Variable extends TypeMember;
    MethodDecl implements TypeMember;

    interface TypeMemberAccess{
        int buildDGNode(JastaddGraphBuilder builder);

        Expr getQualifier();

        TypeMember decl();

        BodyDecl hostBodyDecl();

        TypeDecl hostType();
    }
    VarAccess implements TypeMemberAccess;
    MethodAccess implements TypeMemberAccess;


    class NoTypeUser extends Error {
        public NoTypeUser(){}
        public NoTypeUser(String msg){
            super(msg);
        }
    }

    static void Access.buildTypeUse(JastaddGraphBuilder builder,
                                    TypeMemberAccess access, Uses typeMemberUse) {

        if(qualifierIsThisAccess(access)) {
            int thisTypeId = access.hostType().buildDGNode(builder);
            builder.addEdge(bindTypeUse(builder, thisTypeId, thisTypeId, typeMemberUse));
        }
        else if(qualifierIsSuperAccess(access)){
            int thisTypeId = access.hostType().buildDGNode(builder);
            int superTypeId = ((ClassDecl)access.hostType()).superclass().buildDGNode(builder);
            builder.addEdge(bindTypeUse(builder, thisTypeId, superTypeId, typeMemberUse));
        }
        else
            ((Access)access).buildTypeUseFromLeftExpr(builder, typeMemberUse);
    }

    static boolean Access.qualifierIsThisAccess(TypeMemberAccess access){
        return access.getQualifier() == null &&
                access.decl().hostType() == access.hostType()
                || access.getQualifier() != null &&
                access.getQualifier().isThisAccess();
    }

    static boolean Access.qualifierIsSuperAccess(TypeMemberAccess access){
        return access.getQualifier() == null &&
                access.decl().hostType() != access.hostType()
                || access.getQualifier() != null &&
                access.getQualifier().isSuperAccess();
    }

    public void Access.buildTypeUseFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        Expr lexpr = getLeftExpr();

        if(lexpr == null)
            throw new NoTypeUser(this+"("+this.getClass()+") in "+this.compilationUnit().pathName()+" "+this.location());
        else
            lexpr.findTypeUserAndBindUses(builder, typeMemberUse);

    }

    static Uses Access.bindTypeUse(JastaddGraphBuilder builder,
                           int typeUserNode, int typeUsedNode,
             Uses typeMemberUse){
         Uses typeUse = new Uses(typeUserNode, typeUsedNode, UsesAccessKind.none());
         builder.addTypeRelationship(typeUse, typeMemberUse);
         return typeUse;
    }

    void Expr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        throw new DGBuildingError(this + "(" +this.getClass() + ") in " +
                this.compilationUnit().pathName() +" line " +
                this.location() + " typeUser not found");
    }
    Uses Expr.bindTypeUse(JastaddGraphBuilder builder, int thisDGId, Uses typeMemberUse){
        return Access.bindTypeUse(builder, thisDGId, type().buildDGNode(builder), typeMemberUse);
    }

    // findTypeUserAndBindUses rec calls

    void AssignExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        getDest().findTypeUserAndBindUses(builder, typeMemberUse);
    }

    void Dot.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        if(isRightRotated())
            rotateLeft();
        getRight().findTypeUserAndBindUses(builder, typeMemberUse);
    }

    void ParExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        getExpr().findTypeUserAndBindUses(builder, typeMemberUse);
    }
    void ArrayAccess.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        getLeftExpr().findTypeUserAndBindUses(builder, typeMemberUse);
    }
    void ConditionalExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        getFalseExpr().findTypeUserAndBindUses(builder, typeMemberUse);
        getTrueExpr().findTypeUserAndBindUses(builder, typeMemberUse);
    }


    // findTypeUserAndBindUses term cases


    void AddExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){  System.out.println("AddExpr.typeUserFromLeftExpr(builder)");
        System.out.println("=this.hostBodyDecl().buildDGNode(builder)");
        System.out.println("to check");
        bindTypeUse(builder, this.hostBodyDecl().buildDGNode(builder), typeMemberUse);
    }

    void CastExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        //Access.bindTypeUse(builder, getTypeAccess().buildDGNode(builder), declaredTypeUsed, typeMemberUse);
        bindTypeUse(builder, getTypeAccess().buildDGNode(builder), typeMemberUse);
    }

    void Literal.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        //Access.bindTypeUse(builder, type().buildDGNode(builder), declaredTypeUsed, typeMemberUse);
        bindTypeUse(builder, type().buildDGNode(builder), typeMemberUse);
    }


    // findTypeUserAndBindUses term cases - Access subclasses


    void Access.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        bindTypeUse(builder, this.buildDGNode(builder), typeMemberUse);
    }

//    void ClassAccess.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
//        //In SomeRandomClass.class the class keyword is a classAccess
//        bindTypeUse(builder, this.hostBodyDecl().buildDGNode(builder), typeMemberUse);
//    }


//    void MethodAccess.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
//        if(isSubstitute()){
//            MethodDeclSubstituted decl = (MethodDeclSubstituted)decl();
//
//            int thisNode = decl.getOriginal().buildDGNode(builder);
//            int typeUsed = decl.getTypeAccess().buildDGNode(builder);
//
//            builder.addEdge(Access.bindTypeUse(builder, thisNode, typeUsed, typeMemberUse));
//        }
//        else
//            bindTypeUse(builder, this.buildDGNode(builder), typeMemberUse);
//    }

    void ClassInstanceExpr.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        super.findTypeUserAndBindUses(builder, typeMemberUse);
        if(hasTypeDecl())
            setTarget(null);
    }

    void VarAccess.findTypeUserAndBindUses(JastaddGraphBuilder builder, Uses typeMemberUse){
        super.findTypeUserAndBindUses(builder, typeMemberUse);
        // do not lock varAccess
        setTargetVariable(null);
    }

}