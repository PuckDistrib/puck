aspect TypeUser {

	public int Expr.buildTypeUserDGNode(JastaddGraphBuilder builder){
		throw new DGBuildingError("Cannot get a primary user from the qualifier : " + this +
                " ("+this.getClass()+")");
	}

    interface TypeMember {
        public TypeDecl hostType();
        public String name();

    }

    Variable extends TypeMember;
    MethodDecl implements TypeMember;

    interface TypeMemberAccess{
        int buildDGNode(JastaddGraphBuilder builder);
        Expr getQualifier();
        int buildTypeUserDGNodeFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse);
        int buildTypeUserDGNode(JastaddGraphBuilder builder, Uses typeMemberUse);
        TypeMember decl();
        BodyDecl hostBodyDecl();
        TypeDecl declaredTypeOfQualifier();
        TypeDecl hostType();
    }
    VarAccess implements TypeMemberAccess;
    MethodAccess implements TypeMemberAccess;


    static TypeDecl Access.declaredTypeOfQualifier(TypeMemberAccess access) {
        if(access.getQualifier() == null){
            if(access.decl().hostType() == access.hostType())
                return access.hostType();
            else
                return ((ClassDecl)access.hostType()).superclass();
        }

        if(access.getQualifier().isThisAccess())
            return access.hostType();
        else if(access.getQualifier().isSuperAccess())
            return ((ClassDecl)access.hostType()).superclass();

        return access.getQualifier().type();
    }

    public TypeDecl VarAccess.declaredTypeOfQualifier(){
        return Access.declaredTypeOfQualifier(this);
    }
    public TypeDecl MethodAccess.declaredTypeOfQualifier(){
        return Access.declaredTypeOfQualifier(this);
    }

    static int Access.buildTypeUserDGNode_thisQualifier(TypeMemberAccess access, JastaddGraphBuilder builder, Uses typeMemberUse){
        int selfTypeNode = access.hostType().buildDGNode(builder);
        builder.addEdge(new Uses(selfTypeNode, selfTypeNode, UsesAccessKind.none()));
        return selfTypeNode;
    }

    static int Access.buildTypeUserDGNode_superQualifier(TypeMemberAccess access, JastaddGraphBuilder builder, Uses typeMemberUse){
        ClassDecl thisClass = (ClassDecl)access.hostType();
        int selfTypeNode = thisClass.buildDGNode(builder);
        int superTypeNode = thisClass.superclass().buildDGNode(builder);
        builder.addEdge(new Uses(selfTypeNode, superTypeNode, UsesAccessKind.none()));
        return selfTypeNode;
    }

    static int Access.buildTypeUserDGNode(TypeMemberAccess access, JastaddGraphBuilder builder, Uses typeMemberUse){
        if(access.getQualifier() == null){
             if(access.decl().hostType() == access.hostBodyDecl().hostType())
                return buildTypeUserDGNode_thisQualifier(access, builder, typeMemberUse);
            else
                return buildTypeUserDGNode_superQualifier(access, builder, typeMemberUse);
        }

        if(access.getQualifier().isThisAccess())
            return buildTypeUserDGNode_thisQualifier(access, builder, typeMemberUse);
        else if(access.getQualifier().isSuperAccess())
            return buildTypeUserDGNode_superQualifier(access, builder, typeMemberUse);
            //return access.decl().hostType().buildDGNode(builder);
        else
            return access.buildTypeUserDGNodeFromLeftExpr(builder, typeMemberUse);
    }

    public int VarAccess.buildTypeUserDGNode(JastaddGraphBuilder builder, Uses typeMemberUse){
        return Access.buildTypeUserDGNode(this, builder, typeMemberUse);
    }
	public int MethodAccess.buildTypeUserDGNode(JastaddGraphBuilder builder, Uses typeMemberUse){
        return Access.buildTypeUserDGNode(this, builder, typeMemberUse);
    }
  	
  	class NoTypeUser extends Error {
        public NoTypeUser(){}
        public NoTypeUser(String msg){
            super(msg);
        }
    }
	
  public int Access.buildTypeUserDGNodeFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
  	Expr lexpr = getLeftExpr();
        
      if(lexpr == null)
        throw new NoTypeUser(this+"("+this.getClass()+") in "+this.compilationUnit().pathName()+" "+this.location());
      else
          return lexpr.typeUserFromLeftExpr(builder, typeMemberUse);
  }

  int Expr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        throw new DGBuildingError(this + "(" +this.getClass() + ") in " +
        this.compilationUnit().pathName() +" line " +
        this.location() + " typeUser not found");
  }

  int AssignExpr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        return getDest().typeUserFromLeftExpr(builder, typeMemberUse);
  }

  int AddExpr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        System.out.println("AddExpr.typeUserFromLeftExpr(builder)");
        System.out.println("=this.hostBodyDecl().buildDGNode(builder)");
        System.out.println("to check");
        return this.hostBodyDecl().buildDGNode(builder);
  }


  int ClassAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        //In SomeRandomClass.class the class keyword is a classAccess
        return this.hostBodyDecl().buildDGNode(builder);
  }



  int MethodAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
     if(isSubstitute()){
        MethodDeclSubstituted decl = (MethodDeclSubstituted)decl();

        int thisNode = decl.getOriginal().buildDGNode(builder);

        int typeUsed = decl.getTypeAccess().buildDGNode(builder);
        ParameterizedUses typeUse = new ParameterizedUses(thisNode, typeUsed, UsesAccessKind.none());
        builder.addEdge(typeUse);
        builder.addTypeRelationship(typeUse, typeMemberUse);

        int typeUser = buildTypeUserDGNode(builder, typeMemberUse);
        //int typeUser = buildTypeUserDGNodeFromLeftExpr(builder, typeMemberUse);

        return typeUser;
     }
     else
        return decl().buildDGNode(builder);
  }

//  int ParMethodAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
//     int thisNode = decl().buildDGNode(builder);
//     for(Access typeArg :  getTypeArgumentList()) {
//         int typeArgNode = typeArg.buildDGNode(builder);
//         ParameterizedUses typeUse = new ParameterizedUses(thisNode, typeArgNode);
//        builder.addEdge(typeUse);
//        builder.addTypeRelationship(typeUse, typeMemberUse);
//     }
//     return thisNode;
//  }

  int VarAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
      return ((ASTNode)decl()).buildDGNode(builder);
  }

  //in case of use of static methods, fields ...
  int TypeAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        return decl().buildDGNode(builder);
  }

  public int ClassInstanceExpr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
       return getAccess().buildDGNode(builder);
  }


  public int ArrayAccess.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
        //type() it's that simple !
       return type().buildDGNode(builder);
  }

  public int ParExpr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
     return getExpr().typeUserFromLeftExpr(builder, typeMemberUse);
  }

  public int Dot.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
     if(isRightRotated())
        rotateLeft();
     return getRight().typeUserFromLeftExpr(builder, typeMemberUse);
  }

  // public int ASTNode.typeUserFromLeftExpr(JastaddGraphBuilder builder){
  //   return buildDGNode(builder);
  // }

   public int CastExpr.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
     return getTypeAccess().buildDGNode(builder);
   }

   public int Literal.typeUserFromLeftExpr(JastaddGraphBuilder builder, Uses typeMemberUse){
     return type().buildDGNode(builder);
   }






}