import puck.graph.DGBuildingError;
import puck.graph.NamedType;


aspect TypeFactory {
	

	public abstract void BodyDecl.buildDGType(JastaddGraphBuilder builder, int thisId);
	
	public void MemberTypeDecl.buildDGType(JastaddGraphBuilder builder, int thisId){}
	public void StaticInitializer.buildDGType(JastaddGraphBuilder builder, int thisId){}
	public void InstanceInitializer.buildDGType(JastaddGraphBuilder builder, int thisId){}


	static void ASTNode.astParamsToDGType(JastaddGraphBuilder builder, int thisId, Callable c){
		ArrayList<Integer> params = new ArrayList<>();

		for(ParameterDeclaration pdecl: c.getParameterList()){
			int paramId = pdecl.buildDGNode(builder);
			params.add(paramId);
		 	builder.setType(paramId, builder.getType(pdecl.type()));
		}
		builder.addParams(thisId, params);
	}


	public void FieldDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		throw new DGBuildingError("missing type for FieldDecl");
	}

	public void EnumConstant.buildDGType(JastaddGraphBuilder builder, int thisId){
		throw new DGBuildingError("missing type for EnumConstant");
	}
		
	public void MethodDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, builder.getType(getTypeAccess()));
	}

	public void ConstructorDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, new NamedType(hostType().buildDGNode(builder)));
	}

	public void FieldDeclarator.buildDGType(JastaddGraphBuilder builder, int thisId){
		builder.setType(thisId,  builder.getType(getTypeAccess()));
	}



}