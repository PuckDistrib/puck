/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

import puck.graph.DGBuildingError;
import puck.graph.NamedType;


aspect TypeFactory {
	

	public abstract void BodyDecl.buildDGType(JastaddGraphBuilder builder, int thisId);
	
	public void MemberTypeDecl.buildDGType(JastaddGraphBuilder builder, int thisId){}
	public void StaticInitializer.buildDGType(JastaddGraphBuilder builder, int thisId){}
	public void InstanceInitializer.buildDGType(JastaddGraphBuilder builder, int thisId){}


	static void ASTNode.astParamsToDGType(JastaddGraphBuilder builder, int thisId, Callable c){
		ArrayList<Integer> params = new ArrayList<>();

		for(ParameterDeclaration pdecl: c.getParameterList()){
			int paramId = pdecl.buildDGNode(builder);
			params.add(paramId);
		 	builder.setType(paramId, builder.getType(pdecl.type()));
		}
		builder.addParams(thisId, params);
	}


	public void SubstitutedBodyDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		System.out.println("SubstitutedBodyDecl.buildDGType TODO !!!");
	}


	public void FieldDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		throw new DGBuildingError("missing type for FieldDecl");
	}

	public void EnumConstant.buildDGType(JastaddGraphBuilder builder, int thisId){
		throw new DGBuildingError("missing type for EnumConstant");
	}
		
	public void MethodDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, builder.getType(getTypeAccess()));
	}

	public void ConstructorDecl.buildDGType(JastaddGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, new NamedType(hostType().buildDGNode(builder)));
	}

	public void FieldDeclarator.buildDGType(JastaddGraphBuilder builder, int thisId){
		builder.setType(thisId,  builder.getType(getTypeAccess()));
	}


	public boolean TypeVariable.isTopLevelType() { return false;}
}