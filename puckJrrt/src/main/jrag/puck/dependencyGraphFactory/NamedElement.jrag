/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

import puck.javaGraph.nodeKind.JavaNodeKind;

aspect NamedElement {


    public boolean Opt.isEmpty() {
        return getNumChild() == 0 ||
               getChild(0) == null;
    }

    syn boolean ASTNode.hasDefinition();
    eq ASTNode.hasDefinition() = false;
    eq ConstructorDecl.hasDefinition() = true;
    eq MethodDecl.hasDefinition() {
        return !getBlockOpt().isEmpty();
    }
    eq FieldDeclarator.hasDefinition() {
        return !getInitOpt().isEmpty();
    }

    public Block DGNamedElement.getBody(){throw new Error(this.getClass() + " has no def");}
    public Block ConstructorDecl.getBody(){return getBlock();}
    public Block MethodDecl.getBody(){return getBlock();}

    public int ASTNode.getDefIndex(){throw new Error(this.getClass() + " has no def index");}
    public int ConstructorDecl.getDefIndex(){return 4;}
    public int MethodDecl.getDefIndex(){return 4;}


    public int ASTNode.getParamIndex(){return -1;}
    public int ConstructorDecl.getParamIndex(){return 1;}
    public int MethodDecl.getParamIndex(){return 2;}

    public int ASTNode.getReturnTypeIndex(){return -1;}
    public int MethodDecl.getReturnTypeIndex(){return 1;}



    public interface DGNamedElement {
		String dgFullName();
		String name();

		void registerNode(JastaddGraphBuilder builder, int thisId);

        boolean isSubstitute();
        boolean fromSource();

	}

    syn boolean ASTNode.isNamedElement();
    eq ASTNode.isNamedElement() = false;
    eq DGNamedElement.isNamedElement() = true;
    //eq ParameterDeclaration.isNamedElement() = this.getParent() instanceof CatchClause
    eq WildcardSuperType.isNamedElement() = false;
    eq WildcardExtendsType.isNamedElement() = false;

	TypeDecl implements DGNamedElement;
    GenericTypeDecl implements DGNamedElement;
	// InterfaceDecl implements DGNamedElement;
	// ClassDecl implements DGNamedElement;

    EnumConstant implements DGNamedElement;
    ParameterDeclaration implements DGNamedElement;
	FieldDeclarator implements DGNamedElement;
    Callable extends DGNamedElement;
	MethodDecl implements DGNamedElement;
	ConstructorDecl implements DGNamedElement;


    syn boolean ASTNode.isSubstitute();
    eq ASTNode.isSubstitute() = false;
    eq ClassDeclSubstituted.isSubstitute() = true;
    eq ConstructorDeclSubstituted.isSubstitute() = true;
    eq FieldDeclarationSubstituted.isSubstitute() = true;
    eq GenericClassDeclSubstituted.isSubstitute() = true;
    eq GenericInterfaceDeclSubstituted.isSubstitute() = true;
    eq InterfaceDeclSubstituted.isSubstitute() = true;
    eq MethodDeclSubstituted.isSubstitute() = true;

    eq MethodAccess.isSubstitute() = decl().isSubstitute();

    interface Substitute {
        ASTNode getOriginal();
    }

    interface TypeDeclSubstitute extends Substitute { }


    interface TypeMemberSubstitute extends Substitute {
        TypeDecl type();
    }

    ClassDeclSubstituted implements TypeDeclSubstitute;
    InterfaceDeclSubstituted implements TypeDeclSubstitute;
    GenericClassDeclSubstituted implements TypeDeclSubstitute;
    GenericInterfaceDeclSubstituted implements TypeDeclSubstitute;

    ConstructorDeclSubstituted implements Substitute;
    FieldDeclarationSubstituted implements TypeMemberSubstitute;
    MethodDeclSubstituted implements TypeMemberSubstitute;

    interface Registerable {}

    TypeDecl implements Registerable;
    InterfaceDecl implements Registerable;
    ClassDecl implements Registerable;
    GenericInterfaceDecl implements Registerable;
    GenericClassDecl implements Registerable;
    WildcardType implements Registerable;
    ConstructorDecl implements Registerable;
    ParameterDeclaration implements Registerable;
    FieldDeclarator implements Registerable;
    MethodDecl implements Registerable;
    TypeVariable implements Registerable;
    EnumConstant implements Registerable;
//    Block implements Registerable;
//    Expr implements Registerable;

	public void Registerable.registerNode(JastaddGraphBuilder builder, int thisId){
      builder.registerDecl(thisId, this);
  	}
//duplication needed for overloaded static resolution
    public void GenericInterfaceDecl.registerNode(JastaddGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    public void GenericClassDecl.registerNode(JastaddGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    public void AbstractWildcardType.registerNode(JastaddGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    public void Block.registerDef(JastaddGraphBuilder builder, int thisId){
        builder.registerDef(thisId, this);
    }

    public void Expr.registerDef(JastaddGraphBuilder builder, int thisId){
        builder.registerDef(thisId, this);
    }


    syn JavaNodeKind DGNamedElement.getDGNodeKind();

    eq TypeDecl.getDGNodeKind(){
    	throw new DGBuildingError(this.fullName() + " - " + this.getClass()+" : Unkown nodekind");
    }
    eq TypeVariable.getDGNodeKind() = JastaddGraphBuilder.typeVariable();

    /*eq ClassDecl.getDGNodeKind() = isInnerClass() ?
        JastaddGraphBuilder.innerClassKind() : JastaddGraphBuilder.classKind();

    eq InterfaceDecl.getDGNodeKind() = isInnerType() ?
        JastaddGraphBuilder.innerInterfaceKind() : JastaddGraphBuilder.interfaceKind();
*/

    eq ClassDecl.getDGNodeKind() = JastaddGraphBuilder.classKind();

    eq InterfaceDecl.getDGNodeKind() = JastaddGraphBuilder.interfaceKind();

    eq GenericClassDecl.getDGNodeKind() = JastaddGraphBuilder.genClass(this);

    eq GenericInterfaceDecl.getDGNodeKind() = JastaddGraphBuilder.genInterface(this);

    eq AbstractWildcardType.getDGNodeKind() = JastaddGraphBuilder.wildcardType();
    eq PrimitiveType.getDGNodeKind() = JastaddGraphBuilder.primitive();
	eq VoidType.getDGNodeKind() = JastaddGraphBuilder.primitive();
    eq NullType.getDGNodeKind() = JastaddGraphBuilder.primitive();
    eq ParameterDeclaration.getDGNodeKind() = JastaddGraphBuilder.parameter();
    eq EnumConstant.getDGNodeKind() = JastaddGraphBuilder.enumConstant();

    eq FieldDeclarator.getDGNodeKind() {
        if(this.isStatic())
            return JastaddGraphBuilder.staticField();
        else
            return JastaddGraphBuilder.field();

    }

    eq MethodDecl.getDGNodeKind(){
    	if(this.isAbstract())
	        return JastaddGraphBuilder.abstractMethod();
	    else if (this.isStatic())
            return JastaddGraphBuilder.staticMethod();
        else
	        return JastaddGraphBuilder.method();
    }

    eq ConstructorDecl.getDGNodeKind() = JastaddGraphBuilder.constructor();


}