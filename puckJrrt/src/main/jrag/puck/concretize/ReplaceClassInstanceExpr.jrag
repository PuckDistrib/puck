/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */



aspect ReplaceClassInstanceExpr {

    public void ASTNode.replaceByConstructorMethodCall(ConstructorDecl cdecl, MethodDecl cm) {
        for (int i = 0; i < getNumChild(); i++)
            getChild(i).replaceByConstructorMethodCall(cdecl, cm);
    }


    public void ClassInstanceExpr.replaceByConstructorMethodCall(ConstructorDecl cdecl, MethodDecl cm) {
        if(decl() != cdecl)
            return;

//        if (!(this.hostBodyDecl() instanceof MethodDecl))
//            throw new Error("replaceByConstructorMethodCall, this.hostBodyDecl is " +
//                    this.hostBodyDecl().getClass() + "does not know what to do !!");

        Access acc = cm.createLockedAccess(this.getArgs(), true);
        acc.lock();

        if(cm.isStatic()) replace(this).with(acc);
        else
            replace(this).with(new Dot(new EmptyReceiver(cm.hostType()), acc));
    }


    syn boolean Access.isEmptyAccess() = false;
    eq EmptyAccess.isEmptyAccess() = true;

    public void EmptyAccess.prettyPrint(PrettyPrinter out) {
        out.print("/* Empty Access */");
    }

    //create a locked ClassInstanceExpr
    public static ClassInstanceExpr ClassInstanceExpr.createLockedCtorAccess(ConstructorDecl target, List args) {
        ClassInstanceExpr cie = new ClassInstanceExpr(new EmptyAccess(), args, new Opt());
        cie.setTarget(target);
        return cie;
    }


    public void ASTNode.introduceVarAccess(MemberDecl field, Access byAccess){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).introduceVarAccess(field, byAccess);
    }

    public void VarAccess.introduceVarAccess(MemberDecl field, Access byAccess){
        if(this.decl() == field){
            if(getQualifier().isEmptyReceiver())
                replace(getQualifier()).with(byAccess);
        }
    }

    public void MethodAccess.introduceVarAccess(MemberDecl method, Access byAccess){
        if(this.decl() == method){
            if(getQualifier().isEmptyReceiver())
                replace(getQualifier()).with(byAccess);
        }
    }


    public void ASTNode.replaceConstructorCall(ConstructorDecl oldUsed, ConstructorDecl newUsed){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceConstructorCall(oldUsed, newUsed);
    }

    public void ClassInstanceExpr.replaceConstructorCall(ConstructorDecl oldUsed, ConstructorDecl newUsed){
        if(this.decl() == oldUsed){
              replaceWith(ClassInstanceExpr.createLockedCtorAccess(newUsed, getArgs()));
//            setAccess(newUsed.hostType().createLockedAccess());
//            setTarget(newUsed);
        }
    }
}