/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect ReplaceTypeAccess {

    public void ASTNode.setTypeAccess(Access tAccess){
        throw new PuckError(this.getClass() + ".setTypeAccess not implemented");
    }

    void TypeDecl.replaceTypeAccessInList(Access oldAccess, Access newAccess, List<Access> list){
        if(!oldAccess.isTypeAccess() || !newAccess.isTypeAccess())
            throw new Error("Both access should be type access !");
        TypeDecl oldDecl = ((TypeAccess)oldAccess).decl();
        TypeDecl newDecl = ((TypeAccess)newAccess).decl();

        boolean containsNewAccess = false;
        Access oldAccess0 = null;

        for(Access acc : list){
            if(((TypeAccess)acc).decl().equals(newDecl))
                containsNewAccess = true;

            if(((TypeAccess)acc).decl().equals(oldDecl))
                oldAccess0 = acc;
        }

        if(containsNewAccess)
            list.removeChild(oldAccess0);
        else
            replace(oldAccess0).with(newAccess);

    }

    public void ClassDecl.replaceImplements(Access oldAccess, Access newAccess){
        replaceTypeAccessInList(oldAccess, newAccess, getImplementsList());
    }

    public void InterfaceDecl.replaceSuperInterface(Access oldAccess, Access newAccess){
        replaceTypeAccessInList(oldAccess, newAccess, getSuperInterfaceList());
    }
 /*
    syn boolean Access.isPrimitiveTypeAccess();
    eq Access.isPrimitiveTypeAccess() = false;
    eq PrimitiveTypeAccess.isPrimitiveTypeAccess() = true;


    public void ASTNode.replaceTypeAccess(Access oldUsee, Access newUsee){
      for(int i = 0; i < getNumChild(); i++)
          getChild(i).replaceTypeAccess(oldUsee, newUsee);
  	}

    public boolean TypeAccess.sameDeclAs(Access access){
        return access.isPrimitiveTypeAccess()
            && decl().equals(((PrimitiveTypeAccess)access).decl())
            || access.isTypeAccess()
            && this.decl().equals(((TypeAccess)access).decl());
    }

  	public void TypeAccess.replaceTypeAccess(Access oldUsee, Access newUsee){
        if(sameDeclAs(oldUsee))
            replace(this).with(newUsee);
    }
     */

    public void ASTNode.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceTypeAccess(oldUsed, newUsed);
    }

/*
    public void PrimitiveTypeAccess.replaceTypeAccess(Access oldUsee, Access newUsee){
        System.out.println("replaceType for primitive type : TODO !!!");
    }
*/

    interface Binder {}

    VarDeclStmt implements Binder;
    Declarator implements Binder;

    public void Binder.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        if(this.getTypeAccess().type().equals(oldUsed)){
            this.setTypeAccess(newUsed.createLockedAccess());
            this.flushTreeCache();
        }
    }

    public void TypeAccess.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){

        if( this.decl().equals(oldUsed) ){
            this.setID(newUsed.name());
            this.setTargetType(newUsed);
            this.flushTreeCache();
        }

    }

    public void ClassInstanceExpr.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){

        if( getAccess() instanceof ParTypeAccess){
            throw new PuckError("recheck !");
//            if(decl().isSubstitute()) {
//                ConstructorDeclSubstituted parDecl = ((ConstructorDeclSubstituted) decl()).copy();
//                ParClassDecl parClassDecl = (ParClassDecl) parDecl.hostType();
//
//                /*TODO check if several instances/decl of the same parameterized type what happens then ??*/
//                for(Access arg : parClassDecl.getArgumentList())
//                    arg.replaceTypeAccess(oldUsed, newUsed);
//            }
//
//            List<Access> typeArgs =  ((ParTypeAccess) getAccess()).getTypeArguments();
//            for(int i = 0; i<typeArgs.getNumChild(); i++)
//                typeArgs.getChild(i).replaceTypeAccess(oldUsed, newUsed);

        }
        getArgList().replaceTypeAccess(oldUsed, newUsed);
        getTypeDeclOpt().replaceTypeAccess(oldUsed, newUsed);
    }
}