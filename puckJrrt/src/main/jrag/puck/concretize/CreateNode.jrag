aspect CreateNode {
    public static ConstructorDecl ConstructorDecl.createConstructor(Modifiers mods, String name){
        return new ConstructorDecl(mods, name,
                new List<ParameterDeclaration>(), new List<Access>(), new Opt(), new Block());
    }

    //scala compiler does not like ASTNode type parameter bound
    public CompilationUnit Program.insertUnusedType(String path, String pkg, TypeDecl td) {
        return insertUnusedType(path, pkg, new List<ImportDecl>(), td);
    }


    public void MethodDecl.makeFactoryOf(ConstructorDecl cdecl){
        List<ParameterDeclaration> params = cdecl.getParameterList().copy();
        List<Expr> args = new List<Expr>();
        for(int i =0; i< params.getNumChild(); i++)
            args.add(params.getChild(i).createLockedAccess());

        this.setParameterList(params);
        this.setBlock(new Block(new ReturnStmt( new ClassInstanceExpr(cdecl.hostType().createLockedAccess(), args))));
    }

    interface AccessWithParamaterList {}

    MethodAccess implements AccessWithParamaterList;
    ConstructorAccess implements AccessWithParamaterList;

    public void AccessWithParamaterList.prependArg(Expr e){
        getArgList().insertChild(e, 0);
    }

    interface DeclWithParamaterList {}

    MethodDecl implements DeclWithParamaterList;
    ConstructorDecl implements DeclWithParamaterList;

    public void DeclWithParamaterList.prependParameter(ParameterDeclaration pdecl) {
        getParameterList().insertChild(pdecl, 0);
    }


}