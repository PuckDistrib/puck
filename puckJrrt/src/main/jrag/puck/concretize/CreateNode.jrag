/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

aspect CreateNode {
    public static ConstructorDecl ConstructorDecl.createConstructor(Modifiers mods, String name){
        return new ConstructorDecl(mods, name,
                new List<ParameterDeclaration>(), new List<Access>(), new Opt(), new Block());
    }

    //scala compiler does not like ASTNode type parameter bound
    public CompilationUnit Program.insertUnusedType(String path, String pkg, TypeDecl td) {
        return insertUnusedType(path, pkg, new List<ImportDecl>(), td);
    }


    public void MethodDecl.makeFactoryOf(ConstructorDecl cdecl){
        List<ParameterDeclaration> params = cdecl.getParameterList().copy();
        List<Expr> args = new List<Expr>();
        for(int i =0; i< params.getNumChild(); i++)
            args.add(params.getChild(i).createLockedAccess());

        this.setParameterList(params);
        this.setBlock(new Block(new ReturnStmt( new ClassInstanceExpr(cdecl.hostType().createLockedAccess(), args))));
    }

    interface AccessWithParamaterList {}

    MethodAccess implements AccessWithParamaterList;
    ConstructorAccess implements AccessWithParamaterList;

    public void AccessWithParamaterList.prependArg(Expr e){
        getArgList().insertChild(e, 0);
    }

    interface DeclWithParamaterList {}

    MethodDecl implements DeclWithParamaterList;
    ConstructorDecl implements DeclWithParamaterList;

    public void DeclWithParamaterList.prependParameter(ParameterDeclaration pdecl) {
        getParameterList().insertChild(pdecl, 0);
    }


}