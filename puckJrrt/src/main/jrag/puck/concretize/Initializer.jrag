/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect Initializer {
    public static MethodAccess MethodAccess.createInitializerAccess(MethodDecl initializer){
        MethodAccess ma = new MethodAccess(initializer.name(), new List<Expr>());
        ma.setTargetMethod(new SavedMethodDecl(initializer), true);
        ma.setTargetMethod(initializer.save(), false); //ma.lock(initializer); call to isMonomorphicCall ends up with nullpointer exception
        return ma;
    }

    public void ConstructorDecl.addInitializerCall(MethodDecl initializer){
        this.getBlock().insertStmt(0,
                new ExprStmt(MethodAccess.createInitializerAccess(initializer)));
    }

    public void FieldDeclarator.moveInitIntoInitializzer(MethodDecl initializer){
        if(! getInitOpt().isEmpty() ) {
            //getInitOpt.isEmpty() means field is declared with a complex expression that
            //uses several things. The whole expr is moved with the first use, after that
            //the redirect source can be ignored

            ExprStmt initStmt =
                new ExprStmt(new AssignSimpleExpr(createLockedAccess(), getInit()));

            setInitOpt(new Opt<Expr>());

            initializer.getBlock().addStmt(initStmt);
        }
    }

    public void ConstructorDecl.unsetImplicitConstructor() {
        isImplicitConstructor = false;
    }

    public void MethodDecl.createInitializerCall(MethodDecl initializer){
        int lastStmt = getBlock().getNumStmt() - 1;
        if(!(getBlock().getStmt(lastStmt) instanceof ReturnStmt))
            throw new PuckError("expect return stmt for createInitializerCall");

        ReturnStmt ret = (ReturnStmt)getBlock().getStmt(lastStmt);

        VariableDeclarator dtor =
                new VariableDeclarator("ret", new List<>(),
                        new Opt<>(ret.getResult()));

        Modifiers mods = new Modifiers(new List<>());
        Access t = ret.getResult().type().createLockedAccess();
        VarDeclStmt dstmt = new VarDeclStmt(mods, t, new List<>(dtor));

        ret.setResult(dtor.createLockedAccess());
        getBlock().insertStmt(lastStmt, dstmt);
        lastStmt++;
        ExprStmt initCall = new ExprStmt(new Dot(dtor.createLockedAccess(), initializer.createLockedAccess(new List())));
        getBlock().insertStmt(lastStmt, initCall);
    }

    public boolean ASTNode.containsAccess(MethodDecl initializer){
        boolean contains = false;
        int i=0;
        while(!contains && i<getNumChild()){
            contains = getChild(i).containsAccess(initializer);
            i++;
        }
        return contains;
    }

    public boolean MethodAccess.containsAccess(MethodDecl initializer){
        return decl() == initializer;
    }

    public void ConstructorDecl.removeInitCall(MethodDecl initializer){
        int i = 0;
        for(Stmt stmt : getBlock().getStmtList()){
            if(stmt.containsAccess(initializer)){
                break;
            }
            i++;
        }
        getBlock().removeStmt(i);
    }
}