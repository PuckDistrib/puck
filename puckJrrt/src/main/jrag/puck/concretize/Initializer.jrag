
aspect Initializer {
    public static MethodAccess MethodAccess.createInitializerAccess(MethodDecl initializer){
        MethodAccess ma = new MethodAccess(initializer.name(), new List<Expr>());
        ma.setTargetMethod(new SavedMethodDecl(initializer), true);
        ma.lock(initializer);
        return ma;
    }

    public void ConstructorDecl.addInitializerCall(MethodDecl initializer){
        this.getBlock().insertStmt(0,
                new ExprStmt(MethodAccess.createInitializerAccess(initializer)));
    }

    public void FieldDeclarator.moveInitIntoInitializzer(MethodDecl initializer){
        if(! getInitOpt().isEmpty() ) {
            //getInitOpt.isEmpty() means field is declared with a complex expression that
            //uses several things. The whole expr is moved with the first use, after that
            //the redirect source can be ignored

            ExprStmt initStmt =
                new ExprStmt(new AssignSimpleExpr(createLockedAccess(), getInit()));

            setInitOpt(new Opt<Expr>());

            initializer.getBlock().addStmt(initStmt);
        }
    }

    public void ConstructorDecl.unsetImplicitConstructor() {
        isImplicitConstructor = false;
    }

    public void MethodDecl.createInitializerCall(MethodDecl initializer){
        int lastStmt = getBlock().getNumStmt() - 1;
        if(!(getBlock().getStmt(lastStmt) instanceof ReturnStmt))
            throw new PuckError("expect return stmt for createInitializerCall");

        ReturnStmt ret = (ReturnStmt)getBlock().getStmt(lastStmt);

        VariableDeclarator dtor =
                new VariableDeclarator("ret", new List<>(),
                        new Opt<>(ret.getResult()));

        Modifiers mods = new Modifiers(new List<>());
        Access t = ret.getResult().type().createLockedAccess();
        VarDeclStmt dstmt = new VarDeclStmt(mods, t, new List<>(dtor));

        ret.setResult(dtor.createLockedAccess());
        getBlock().insertStmt(lastStmt, dstmt);
        lastStmt++;
        ExprStmt initCall = new ExprStmt(new Dot(dtor.createLockedAccess(), initializer.createLockedAccess(new List())));
        getBlock().insertStmt(lastStmt, initCall);
    }

    public boolean ASTNode.containsAccess(MethodDecl initializer){
        boolean contains = false;
        int i=0;
        while(!contains && i<getNumChild()){
            contains = getChild(i).containsAccess(initializer);
            i++;
        }
        return contains;
    }

    public boolean MethodAccess.containsAccess(MethodDecl initializer){
        return decl() == initializer;
    }

    public void ConstructorDecl.removeInitCall(MethodDecl initializer){
        int i = 0;
        for(Stmt stmt : getBlock().getStmtList()){
            if(stmt.containsAccess(initializer)){
                break;
            }
            i++;
        }
        getBlock().removeStmt(i);
    }
}