/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

import puck.PuckError;

aspect HandleQualifier {

    //proper signature for scala then gen cast to factorize code
    public void ASTNode.handleQualifierOfAccessOfStaticMember(BodyDecl staticMemberDecl, TypeDecl newContainingType){
        handleQualifierOfAccessOfStaticMember((ASTNode) staticMemberDecl, newContainingType);
    }
    public void ASTNode.handleQualifierOfAccessOfStaticMember(FieldDeclarator staticMemberDecl, TypeDecl newContainingType){
        handleQualifierOfAccessOfStaticMember((ASTNode) staticMemberDecl, newContainingType);
    }

    protected void ASTNode.handleQualifierOfAccessOfStaticMember(ASTNode staticMemberDecl, TypeDecl newContainingType){
        for(int i = 0; i < getNumChild(); i++){
            getChild(i).handleQualifierOfAccessOfStaticMember(staticMemberDecl, newContainingType);
        }
    }

    public void TypeMemberAccess.handleQualifierOfAccessOfStaticMember(ASTNode staticMemberDecl, TypeDecl newContainingType){
        if(accessed() == staticMemberDecl){
            if(isQualified())
                if(hostType() == newContainingType)
                    replace(parentDot()).with(this);
                else
                    replace(qualifier()).with(newContainingType.createLockedAccess());
            else if(hostType() != newContainingType){
                this.qualifyWith(newContainingType.createLockedAccess());
                parentDot().flushTreeCache();
            }

        }
        super.handleQualifierOfAccessOfStaticMember(staticMemberDecl, newContainingType);
    }
}