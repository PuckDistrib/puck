/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

aspect RemoveNode {

    public void ASTNode.puckDelete(){
        getParent().removeChild(this);
    }

    public void TypeDecl.puckDelete(){
        if(compilationUnit().getNumTypeDecl() == 1)
            compilationUnit().puckDelete();
        else
            super.puckDelete();
    }

    public void TypeDecl.removeSuperType(TypeDecl typeDecl){
        throw new PuckError("removeSuperType in " + this.getClass() +"not implemented");
    }

    public void ClassDecl.removeSuperType(TypeDecl typeDecl){
        if( !getSuperClassOpt().isEmpty() &&
                getSuperClass().accessTo(typeDecl)){
            setSuperClassOpt(new Opt<Access>());
            return;
        }
        List<Access> implementsList =  getImplementsList();

        for(int i = 0; i< implementsList.getNumChild(); i++)
            if(implementsList.getChild(i).accessTo(typeDecl)) {
                implementsList.removeChild(i);
                break;
            }
    }

    public boolean Access.accessTo(TypeDecl typeDecl){
        return false;
    }
    public boolean TypeAccess.accessTo(TypeDecl typeDecl){
        return decl().equals(typeDecl);
    }

    public void CompilationUnit.removeTypeDecl(TypeDecl td){
        String name = td.name();
        int idx =  getTypeDeclList().getIndexOfChild(td);
        if(idx != -1) {
            getTypeDeclList().removeChild(idx);

            if (pathName().endsWith(name + ".java")) {
                for (int i = 0; i < getNumTypeDecl(); i++) {
                    TypeDecl td2 = getTypeDecl(i);
                    if (td != td2) { //sanity check
                        String newPath = pathName().replace(name + ".java", td2.name() + ".java");
                        this.setPathName(newPath);
                    }
                }
            }
        }
    }

    void ASTNode.removeParameter(MethodDecl md, int paramIndex){
        for(int i =getNumChild() -1 ; i >=0 ; i--)
        getChild(i).removeParameter(md, paramIndex);
    }
    void MethodAccess.removeParameter(MethodDecl md, int paramIndex) {
        super.removeParameter(md, paramIndex);
        if(decl() == md) getArgList().removeChild(paramIndex);
    }

    void ASTNode.removeParameterAccess(ParameterDeclaration param){
        for(int i =getNumChild() -1 ; i >=0 ; i--)
        getChild(i).removeParameterAccess(param);
    }
    void VarAccess.removeParameterAccess(ParameterDeclaration param){
        if(this.decl() == param){
            if(this.getParent() instanceof AbstractDot){
                AbstractDot ad = (AbstractDot) getParent();
                ad.replaceWith(ad.getRight());
            }
            else
                throw new RefactoringException("Removing parameter outside of a dot scope not handled");
        }
    }
//    public void ClassDecl.removeImplements(InterfaceDecl decl) {
//        int idx = -1;
//        for(int i = 0; i < getImplementsList().getNumChild(); i++){
//            if(((TypeAccess)getImplements(i)).decl().equals(decl))
//                idx = i;
//        }
//        if(idx!= -1)
//            getImplementsList().removeChild(idx);
//    }
//
//    public void InterfaceDecl.removeSuperInterface(InterfaceDecl decl) {
//        int idx = -1;
//        for(int i = 0; i < getSuperInterfaceIdList().getNumChild(); i++){
//            if(((TypeAccess)getSuperInterfaceId(i)).decl().equals(decl))
//                idx = i;
//        }
//        if(idx!= -1)
//            getSuperInterfaceIdList().removeChild(idx);
//    }
}