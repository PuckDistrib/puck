/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect ReplaceInstanceValueAccess {

    public void ASTNode.replaceFieldReadAccess(FieldDeclarator fd, MethodDecl md) {
        for (int i = 0; i < getNumChild(); i++)
        getChild(i).replaceFieldReadAccess(fd, md);
    }

    public void VarAccess.replaceFieldReadAccess(FieldDeclarator fd, MethodDecl md) {
        if( this.decl() == fd &&
        this.usesAccessKind().equals(UsesAccessKind.read())){
            MethodAccess macc = md.createLockedAccess(new List<>());
            if(isQualified()){
                Expr q = qualifier();
                replace(parentDot()).with(new Dot(q, macc));
            }
            else {
                replace(this).with(macc);
            }
        }
    }

    public void ASTNode.replaceThisQualifierFor(MemberDecl method, Access byAccess){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceThisQualifierFor(method, byAccess);
    }

    public void MethodAccess.replaceThisQualifierFor(MemberDecl method, Access byAccess){
        if(this.decl() == method){
            if(!isQualified() || qualifier().isThisAccess())
                this.qualifyWith(byAccess);
            else
                replace(qualifier()).with(byAccess);
        }
    }

    public void VarAccess.replaceThisQualifierFor(MemberDecl field, Access byAccess){
        if(this.decl() == field){
            if(!isQualified() || qualifier().isThisAccess())
                this.qualifyWith(byAccess);
            else
                replace(qualifier()).with(byAccess);
        }
    }

    public void ASTNode.replaceFieldAccess(FieldDeclarator oldUsed, Access newUsed) {
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceFieldAccess(oldUsed, newUsed);
    }
    public void VarAccess.replaceFieldAccess(FieldDeclarator oldUsed, Access newUsed) {
        if(decl().equals(oldUsed)){
            replace(this).with(newUsed);
        }
    }


    public void Callable.replaceMethodCall(MethodDecl oldUsed, MethodDecl newUsed){
        super.replaceMethodCall(oldUsed, newUsed);
    }

    public void ASTNode.replaceMethodCall(MethodDecl oldUsed, MethodDecl newUsed){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceMethodCall(oldUsed, newUsed);
    }

    public void MethodAccess.replaceMethodCall(MethodDecl oldUsed, MethodDecl newUsed){
        this.getArgList().replaceMethodCall(oldUsed, newUsed);
        if( targetMethod != null &&
           targetMethod.getDecl() == oldUsed) {
            MethodAccess ma = new MethodAccess(newUsed.name(), this.getArgList());
            boolean isMonoCall = this.isMonomorphicCall;
            if(newUsed.hostType().isInterfaceDecl())
                isMonoCall = false;
            ma.setTargetMethod(new SavedMethodDecl(newUsed), isMonoCall);
        //        if(oldUsed.hostType() != newUsed.hostType())
            replace(this).with(ma);
        }
    }

}