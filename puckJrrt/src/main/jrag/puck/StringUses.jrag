/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */

/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect StringUses {
	// bind all uses of a string literal to its LSA

	syn Map<String,Collection<BodyDecl>> Program.allStringUses(Map<String,Collection<BodyDecl>> smap) {
		program().collectAllStringUses(smap);
		return smap;
	}
	protected void ASTNode.collectAllStringUses(Map<String,Collection<BodyDecl>> smap) {
		for(int i = 0; i < getNumChild(); i++)
			 getChild(i).collectAllStringUses(smap);
	}
	protected void Literal.collectAllStringUses(Map<String,Collection<BodyDecl>> smap) {
		if (this instanceof StringLiteral) {
			Collection<BodyDecl> col = (Collection<BodyDecl>) smap.get(this.getLITERAL());
			if ( col != null) {
				col.add(this.enclosingBodyDecl());
				smap.put(this.getLITERAL(), col);
			}
		}
	}

/*	syn lazy Collection<BodyDecl> Program.StringUses() {
		Collection<BodyDecl> col = new LinkedList<BodyDecl>();
		program().collectStringUses(this.anLSA("hello").getLITERAL(), col);
		return col;
	}
	protected void ASTNode.collectStringUses(String lsa_value, Collection<BodyDecl> col) {
		for(int i = 0; i < getNumChild(); i++)
			 getChild(i).collectStringUses(lsa_value, col);
	}
	protected void Literal.collectStringUses(String lsa_value, Collection<BodyDecl> col) {
		if (this instanceof StringLiteral) {
			if (this.getLITERAL().equals(lsa_value)) col.add(this.enclosingBodyDecl());
		}
	}
*/
/*	// collect the number of uses of a string literal to its LSA 
	syn lazy int Program.StringUses() {
		return program().collectStringUses(this.anLSA().getLITERAL(), 0);
	}
	protected int ASTNode.collectStringUses(String lsa_value, int cpt) {
		for(int i = 0; i < getNumChild(); i++)
			 cpt+= getChild(i).collectStringUses(lsa_value, 0);
		return cpt;
	}
	protected int Literal.collectStringUses(String lsa_value, int cpt) {
		if (this instanceof StringLiteral) {
			if (this.getLITERAL().equals(lsa_value)) cpt++;
			return cpt;
		} else {
			return 0;
		}
	}	*/

}