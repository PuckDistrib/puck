/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect ReplaceTypeAccess {

    public void ASTNode.setTypeAccess(Access tAccess){
        throw new PuckError(this.getClass() + ".setTypeAccess not implemented");
    }

    void TypeDecl.replaceTypeAccessInList(Access oldAccess, Access newAccess, List<Access> list){
        if(!oldAccess.isTypeAccess() || !newAccess.isTypeAccess())
            throw new Error("Both access should be type access !");
        TypeDecl oldDecl = ((TypeAccess)oldAccess).decl();
        TypeDecl newDecl = ((TypeAccess)newAccess).decl();

        boolean containsNewAccess = false;
        Access oldAccess0 = null;

        for(Access acc : list){
            if(((TypeAccess)acc).decl().equals(newDecl))
                containsNewAccess = true;

            if(((TypeAccess)acc).decl().equals(oldDecl))
                oldAccess0 = acc;
        }

        if(containsNewAccess)
            list.removeChild(oldAccess0);
        else
            replace(oldAccess0).with(newAccess);

    }

    public void ClassDecl.replaceImplements(Access oldAccess, Access newAccess){
        replaceTypeAccessInList(oldAccess, newAccess, getImplementsList());
    }

    public void InterfaceDecl.replaceSuperInterface(Access oldAccess, Access newAccess){
        replaceTypeAccessInList(oldAccess, newAccess, getSuperInterfaceList());
    }

    public boolean ASTNode.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        boolean replaced = false;
        for(int i = 0; i < getNumChild(); i++)
            replaced = getChild(i).replaceTypeAccess(oldUsed, newUsed) || replaced;
        return replaced;
    }




    public boolean TypeAccess.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        if( this.decl().equals(oldUsed) ){
            Access newAccess=newUsed.createLockedAccess();
            replace(this).with(newAccess);
            return true;
        }
        return false;
    }

    public boolean ParTypeAccess.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        if(super.replaceTypeAccess(oldUsed, newUsed)){
            setTarget(null);
            type_reset();
            for (Access argument : getTypeArgumentList()) {
                argument.flushTreeCache();
            }
            lock(type());
            type().flushTypeVariableLock();
            return true;
        }
        return false;
    }

    public void ASTNode.flushTypeVariableLock(){
        for(int i=0; i< getNumChild(); i++){
            getChild(i).flushTypeVariableLock();
        }
    }

    public void TypeAccess.flushTypeVariableLock(){
        if(accessed() instanceof TypeVariable)
            setTargetType(null);
        else
            super.flushTypeVariableLock();
    }

    public boolean ClassInstanceExpr.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){

        if( getAccess() instanceof ParTypeAccess){
//            throw new PuckError("recheck !");
            setTarget(null);
            flushTreeCache();
            List<Access> typeArgs =  ((ParTypeAccess) getAccess()).getTypeArguments();
            typeArgs.replaceTypeAccess(oldUsed, newUsed);
            lock();

        }
        getArgList().replaceTypeAccess(oldUsed, newUsed);
        getTypeDeclOpt().replaceTypeAccess(oldUsed, newUsed);
        return false;
    }

    interface TypeAccessReplacer {}

    ParameterDeclaration implements TypeAccessReplacer;
    MethodDecl implements TypeAccessReplacer;

    public boolean TypeAccessReplacer.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){

        if(super.replaceTypeAccess(oldUsed, newUsed)){
            type_reset();
            return true;
        }
        return false;
    }

    public boolean EnhancedForStmt.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        boolean replaced = super.replaceTypeAccess(oldUsed, newUsed);
        if(replaced)
        flushTreeCache();
        return replaced;
    }
    public boolean VarDeclStmt.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        if(super.replaceTypeAccess(oldUsed, newUsed)) {
            flushTreeCache();
            return true;
        }
        return false;
    }

    void Declarator.getTypeAccessReset() {
        getTypeAccess_reset();
    }

    public boolean FieldDecl.replaceTypeAccess(TypeDecl oldUsed, TypeDecl newUsed){
        if(super.replaceTypeAccess(oldUsed, newUsed)) {
            for(Declarator d : getDeclaratorList()){
                d.getTypeAccessReset();
            }
            return true;
        }
        return false;
    }
}