/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */
aspect Desambiguation{

	public DGNamedElement ASTNode.getDGNamedNode(){
		if(getParent() == null)
			throw new PuckError("no parent named node !");
		return getParent().getDGNamedNode();
	}

	public DGNamedElement DGNamedElement.getDGNamedNode(){
		return this;
	}

	public DGNamedElement ASTNode.getParentNamedNode(){
		return getParent().getDGNamedNode();
	}

	public String ASTNode.dgFullName(){
		throw new PuckError("dgFullName not defined for "+ this);
	}

	public String TypeDecl.dgFullName() {
		if (isNestedType())
			return getParentNamedNode().dgFullName() + "." + getID();

		String packageName = packageName();
		if (packageName.equals(""))
			return getID();

		return packageName + "." + getID();
	}

	public String TypeVariable.dgFullName(){
		return getParentNamedNode().dgFullName() + "@" + getID();
	}

	public String Callable.dgFullName(){
		return hostType().dgFullName()+"."+name()
				+ getParametersAsString();
	}

	public String MethodDecl.fullName(){
		return dgFullName();
	}

	public String FieldDeclarator.dgFullName(){
		return hostType().dgFullName()+"."+name();
	}

	public String ParameterDeclaration.dgFullName(){
		return getParentNamedNode().dgFullName()+"."+name();
	}
	public String AnonymousDecl.dgFullName(){
        DGNamedElement parentNamedNode = getParentNamedNode();

        //in case of
        // I localVar = new I(){ ... }
        if(!(parentNamedNode instanceof BodyDecl ||
                 parentNamedNode instanceof FieldDeclarator)) {
            parentNamedNode = parentNamedNode.getParentNamedNode();
        }
        return parentNamedNode.dgFullName() + "." + name();
	}

	public String EnumConstant.dgFullName(){
		return getParentNamedNode().dgFullName() + "." + name();
	}

	public String VariableDeclarator.dgFullName(){
		return hostBodyDecl().dgFullName() + ".Definition." + name();
	}
	public String StaticInitializer.dgFullName(){
		return hostType().dgFullName() + ".StaticInitializer"+ getChildIndex();
	}

	public String InstanceInitializer.dgFullName(){
		return hostType().dgFullName() + ".InstanceInitializer"+ getChildIndex();
	}

	Callable extends TypeMember;

	public String Callable.getParametersAsString(){

		StringBuilder stringParameters = new StringBuilder();
		stringParameters.append("(");
		List<ParameterDeclaration> params = getParameterList();
		if(params.getNumChild() > 0){
			for(int i = 0; i< params.getNumChild() - 1; i++){
				ParameterDeclaration pdecl = params.getChild(i);
				stringParameters.append(pdecl.typeNameInSig());
				stringParameters.append(",");
			}
			ParameterDeclaration pdecl = params.getChild(params.getNumChild()-1);
			stringParameters.append(pdecl.typeNameInSig());
		}
		stringParameters.append(")");

		return stringParameters.toString();
	}

	public String ParameterDeclaration.typeNameInSig(){
		if(getTypeAccess() instanceof ParTypeAccess){
			ParTypeAccess pta = (ParTypeAccess) getTypeAccess();
			return pta.genericDecl().getID();
		}
		return type().name();
	}

}
