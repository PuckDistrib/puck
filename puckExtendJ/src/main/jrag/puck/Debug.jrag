/*
 * Puck is a dependency analysis and refactoring tool.
 * Copyright (C) 2016 Loïc Girault loic.girault@gmail.com
 *               2016 Mikal Ziane  mikal.ziane@lip6.fr
 *               2016 Cédric Besse cedric.besse@lip6.fr
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *   Additional Terms.
 * Author attributions in that material or in the Appropriate Legal
 * Notices displayed by works containing it is required.
 *
 * Author of this file : Loïc Girault
 */


aspect Debug {

       //static boolean ASTNode.debugPrint = false;

//       void ASTNode.printClass(){
//              System.out.println(getClass());
//              for(ASTNode child: this)
//                     child.printClass();
//       }

    public void ASTNode.collectGenericClassDecl_aux(Map<GenericClassDecl, java.util.List<ASTNode> > m){
        for(int i=0; i<getNumChild(); i++){
            getChild(i).collectGenericClassDecl_aux(m);
        }
    }
    public Map<GenericClassDecl, java.util.List<ASTNode> > ASTNode.collectGenericClassDecl(){
        Map<GenericClassDecl, java.util.List<ASTNode> > m = new HashMap<GenericClassDecl, java.util.List<ASTNode>>();
        collectGenericClassDecl_aux(m);
        return m;
    }
    public void GenericClassDecl.collectGenericClassDecl_aux(Map<GenericClassDecl, java.util.List<ASTNode> > m){
        java.util.List<ASTNode> prev;
        if(m.get(this) == null) {
            prev = new ArrayList<ASTNode>();
            m.put(this, prev);
        }

        prev = m.get(this);

        prev.add(getParent());

        super.collectGenericClassDecl_aux(m);
        }

    public int ASTNode.numNodes(){
        int n = 1;
        for(int i = 0; i< getNumChild(); i++){
            n += getChild(i).numNodes();
        }
        return n;
    }
}