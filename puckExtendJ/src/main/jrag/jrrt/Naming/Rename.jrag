aspect Rename {
	public static LanguageExtension ASTNode.LOCKED_NAMES = new LanguageExtension("locked names") {
		public void eliminateOn(ASTNode n) {
			n.eliminateLockedNamesInSubtree();
		}
	};
	
	public void ASTNode.eliminateLockedNamesInSubtree() {
		Program root = program();
		eliminateLockedNames();
		while(root != null && !root.affectedByUnlock.isEmpty()) {
			if(root != null)
				root.affectedByUnlock.clear();
			flushTreeCache();
			eliminateLockedNames();
		}
		flushTreeCache();
	}
	
	public void ASTNode.eliminateLockedNames() {
		for(int i=0;i<getNumChild();++i) {
			if(getChild(i) == null)
				System.out.println("ERROR !");
			getChild(i).eliminateLockedNames();
		}
	}
	
	/* Any sweep over the tree to unlock names may introduce new locked names. We collect these 
	 * and all names that have been re-qualified in the program node, if it is accessible. */
	protected final Collection<Access> Program.affectedByUnlock = new LinkedList<Access>();
	
	public void Program.flushTreeCache() {
		affectedByUnlock.clear();
		super.flushTreeCache();
	}
	
	protected void ASTNode.affectedByUnlock(Access... accs) {
		Program root = program();
		if(root != null) {
			for(Access acc : accs)
				root.affectedByUnlock.add(acc);
		}
	}
}