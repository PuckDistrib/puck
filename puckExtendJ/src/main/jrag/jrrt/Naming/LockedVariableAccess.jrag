aspect LockedVariableAccess {
	/* A locked variable access is a variable access that does not obey the normal variable lookup
	 * rules, but instead immediately binds to its target. */
	private Variable VarAccess.targetVariable = null;
	void VarAccess.setTarget(Variable var) {
		targetVariable = var;
	}
	
	public VarAccess Variable.createLockedAccess() {
		VarAccess va = new VarAccess(this.name());
		va.lock(this);
		return va;
	}
	
	refine VariableScopePropagation eq VarAccess.decls() = targetVariable == null ? refined() : ASTNode.<Variable>emptySet().add(targetVariable);
	

	refine PrettyPrint public void VarAccess.prettyPrint(PrettyPrinter out) {
		if(targetVariable == null) {
			refined(out);
		} else {
			out.print("[[");
			refined(out);
			out.print("]]");
		}
	}
	
	// introducing locked variable accesses
	public ASTNode VarAccess.lockNames(Collection<String> endangered) {
		if(endangered.contains(name()))
			return lock();
		else
			return super.lockNames(endangered);
	}
	
	public ASTNode VarAccess.lock() {
		return targetVariable == null ? lock(decl()) : this;
	}
	
	public ASTNode VarAccess.lock(Variable target) {
		mandatoryAssert(target != null);
		setTarget(target);
		return this;
	}
	
	public boolean Variable.isSubstituted() { return false; }
	public boolean FieldDeclarationSubstituted.isSubstituted() { return true; }
	//public boolean ParameterDeclarationSubstituted.isSubstituted() { return true; }
	//public boolean VariableArityParameterDeclarationSubstituted.isSubstituted() { return true; }
	
	public boolean VarAccess.isLocked() { return targetVariable != null; }
	
	// eliminating locked variable accesses
	inh TypeDecl VarAccess.enclosingType();
	public void VarAccess.eliminateLockedNames() {
		if(targetVariable != null)
			unlock();
		super.eliminateLockedNames();
	}
	public Access VarAccess.unlock() {
		Opt<Expr> squal = qualifierOpt();
		mandatoryAssert(squal.isEmpty() ||
			(parentDot() != null && squal.get() == prevExpr()));
		Variable target = targetVariable.refresh();
		setTarget(null);
		flushCache();
		if(fromSource())
			setID(target.name());
		if(decl().equals(target)) {
			return this;
		} else if(!fromSource()) {
			throw new RefactoringException("cannot fix variable access in compiled code");
		} else {
			return unlock(squal, target);
		}
	}
	
	public Access VarAccess.unlock(Opt<Expr> squal, Variable target) {
		if((squal.isEmpty()  ? inStaticContext() : squal.get().staticContextQualifier()) && target.isField() && !target.isStatic())
			throw new RefactoringException("cannot access instance variable in static context");
		SymbolicVarAccess acc = accessVariable(target);
		if(acc.isUnknownVarAccess()) {
			if((squal.isEmpty() || squal.get().isPure()) && target.isStatic()) {
				TypeDecl host = target.hostType();

				if(target.isField()) {
					if (!host.accessibleFrom(hostType())) {
						host.setVisibility(VIS_PUBLIC);
						host.flushVisibilityCache();
					}
					if (!target.accessibleFrom(hostType())){
						target.getModifiers().setVisibility(VIS_PUBLIC);
						target.getModifiers().flushTreeCache();
					}
				}
				if(host.accessibleFrom(hostType()) && mayAccess(target)) {
					this.flushCache();
					Access hostAccess = host.createLockedAccess();
					affectedByUnlock(hostAccess, this);
					return (Access) replace(squal.nonEmpty() ? parentDot() : this).with(hostAccess.qualifiesAccess(this));
				}
			} else if(squal.nonEmpty() && (squal.get().isThisAccess() || squal.get().isSuperAccess())) {
				acc = parentDot().accessVariable(target);
				if(acc != null && !acc.isUnknownVarAccess())
					return acc.accessByModifyingAccess(this);
			}
			throw new RefactoringException("cannot access variable "+target.name() + " at " + fullLocation());
		}
		return acc.accessByModifyingAccess(this);
	}
	
	// eliminating locked variable accesses
	public Access SymbolicFieldAccess.accessByModifyingAccess(VarAccess originalAccess) {
		mandatoryAssert(originalAccess != null);
		Opt<Expr> squalifier = originalAccess.qualifierOpt();
		TypeDecl enclosing = originalAccess.hostType();
		VarAccess va = originalAccess;
		va.flushCache();
		
		Expr to_replace = squalifier.isEmpty() ? originalAccess : originalAccess.parentDot();
		Access access = null;
		ASTNode parent = to_replace.replace(to_replace);
		
		if(target.isStatic()) {
			if (squalifier.isEmpty() || squalifier.get().type() != target.hostType()) {
				Access hostAccess = target.hostType().createLockedAccess();
				parent.affectedByUnlock(hostAccess, va);
				access = hostAccess.qualifiesAccess(va);
			} else {
				access = va;
			}
		} else {
			if(directlyVisible) {
				access = va;
			} else {
				if(squalifier.isEmpty()) {
					if(source.equals(bend)) {
						if(bend.equals(enclosing)) {                                         	// this.f
							parent.affectedByUnlock(va);
							access = new ThisAccess("this").qualifiesAccess(va);
						} else {                                                                // B.this.f
							Access bendAccess = bend.createLockedAccess();
							parent.affectedByUnlock(bendAccess, va);
							access = bendAccess.qualifiesAccess(new ThisAccess("this").qualifiesAccess(va));
						}
					} else if(bend.isClassDecl() && source.equals(((ClassDecl)bend).superclass())) {
						if(bend.equals(enclosing)) {                                            // super.f
							parent.affectedByUnlock(va);
							access = new SuperAccess("super").qualifiesAccess(va);
						} else {                               									// B.super.f
							Access bendAccess = bend.createLockedAccess();
							parent.affectedByUnlock(bendAccess, va);
							access = bendAccess.qualifiesAccess(new SuperAccess("super").qualifiesAccess(va));
						}
					} else {
						va.lock(target);
						if(bend.equals(enclosing)) {											// ((S)this).f
							Access sourceAccess = source.createLockedAccess();
							parent.affectedByUnlock(sourceAccess, va);
							access = new ParExpr(new CastExpr(sourceAccess,                     
									new ThisAccess("this"))).qualifiesAccess(va);
						} else {																// ((S)B.this).f
							Access sourceAccess = source.createLockedAccess(),
								   bendAccess = bend.createLockedAccess();
							parent.affectedByUnlock(sourceAccess, bendAccess, va);
							access = new ParExpr(new CastExpr(sourceAccess,                    
									bendAccess.qualifiesAccess(
											new ThisAccess("this")))).qualifiesAccess(va);
						}
					}
				} else {
					if(!bend.equals(squalifier.get().type()))
						throw new RefactoringException("cannot access variable");
					if(source.equals(squalifier.get().type()))
						access = va;
					Access sourceAccess = source.createLockedAccess();
					va.lock(target);
					parent.affectedByUnlock(sourceAccess, va);
					// "super" is treated as a normal expression in JastAddJ, but it actually isn't
					if(squalifier.get().isSuperAccess())
						squalifier.setChild(squalifier.get().convertSuperToThis(), 0);
					access = new ParExpr(new CastExpr(sourceAccess, squalifier.get())).qualifiesAccess(va);
				}
			}
		}
		access.flushCache();
		if (squalifier.nonEmpty()) {
			squalifier.get().flushTreeCache();
		}
		if (to_replace.equals(access))
			return access;
		return (Access) parent.with(access);
	}
	
	public Access UnknownVarAccess.accessByModifyingAccess(VarAccess originalAccess) {
		throw new RefactoringException("cannot access variable");
	}
	
	public Access LocalDeclaration.accessByModifyingAccess(VarAccess originalAccess) {
		if(originalAccess.isQualified())
			throw new RefactoringException("cannot qualify access to local variable");
		return originalAccess;
	}
}