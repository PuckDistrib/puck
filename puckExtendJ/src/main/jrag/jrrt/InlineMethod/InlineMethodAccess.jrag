aspect InlineMethodAccess {
	
	// remove or simplify "this" or "super" qualifiers marked "synthetic"
	private boolean ThisAccess.synthetic = false;
	private boolean SuperAccess.synthetic = false;
	public ThisAccess.ThisAccess(boolean synthetic) {
		this("this");
		this.synthetic = synthetic;
	}
	public SuperAccess.SuperAccess(boolean synthetic) {
		this("super");
		this.synthetic = synthetic;
	}
	
	public void ASTNode.removeSyntheticThis() {
		for(int i=0;i<getNumChild();++i)
			getChild(i).removeSyntheticThis();
	}
	
	public void ThisAccess.removeSyntheticThis() {
		if(synthetic && hasNextAccess()) {
			Access acc = nextAccess();
			boolean canRemove = false;
			if(acc instanceof VarAccess) {
				canRemove = true;
				((VarAccess)acc).lock();
			} else if(acc instanceof MethodAccess) {
				canRemove = true;
				((MethodAccess)acc).lock();
			} else if(acc instanceof ClassInstanceExpr) {
				canRemove = true;
				Access tacc = ((ClassInstanceExpr)acc).getAccess();
				((TypeAccess)tacc.lastAccess()).lock();
			} else if(acc instanceof ConstructorAccess) {
				canRemove = true;
			}
			if(canRemove) {
				if(isLeftChildOfDot()) {
					replace(getParent()).with(parentDot().getRight());
				} else if(isRightChildOfDot()) {
					AbstractDot parent = (AbstractDot)getParent();
					if(parent.isLeftChildOfDot())
						replace(parent.getParent()).with(parent.parentDot().getRight());
				}
			}
		}
	}
	
	public void SuperAccess.removeSyntheticThis() {
		if(synthetic) {
			Access acc = nextAccess();
			if(acc instanceof VarAccess) {
				((VarAccess)acc).lock();
				if(isLeftChildOfDot()) {
					replace(getParent()).with(parentDot().getRight());
				} else if(isRightChildOfDot()) {
					AbstractDot parent = (AbstractDot)getParent();
					if(parent.isLeftChildOfDot())
						replace(parent.getParent()).with(parent.parentDot().getRight());					
				}
			} else if(acc instanceof MethodAccess) {
				// cannot remove it, but we can simplify A.super.m(...) to super.m(...) if A is the host class
				if(isQualified() && qualifier().type() == hostType()) {
					replace(getParent()).with(new SuperAccess(false));
				}
			}
		}
	}
	
}