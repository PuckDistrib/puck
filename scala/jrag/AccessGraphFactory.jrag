import puck.javaAG.JavaAccessGraph;
import puck.graph.AGNode;
import puck.graph.AGBuildingError;


aspect AccessGraphFactory {

	public interface LoadingListener {
		public void update(double loading);
	}	

	public JavaAccessGraph Program.buildAccessGraph(Map<String,Collection<BodyDecl>> stringsRequest, LoadingListener ll){

		JavaAccessGraph accessGraph = new puck.javaAG.JavaAccessGraph();

		if(stringsRequest != null){
			for (java.util.Map.Entry<String, Collection<BodyDecl>>  entry : allStringUses(stringsRequest).entrySet()) {
				accessGraph.addStringLiteral(entry.getKey(), entry.getValue());
			}
		}

		if(ll == null)
			silentBuild(accessGraph);
		else
			verboseBuild(accessGraph, ll);

		return accessGraph;
	}

	private void Program.silentBuild(JavaAccessGraph accessGraph){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
		}
	}

	private void Program.verboseBuild(JavaAccessGraph accessGraph, LoadingListener ll){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		double nchild = compUnitList.getNumChild();
		double d = 0.0;
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
			d++;
			ll.update(d/nchild);
		}
		ll.update(1);
	}


	public AGNode ASTNode.buildAG(JavaAccessGraph accessGraph){
		// for(int i=0; i< getNumChild(); i++){
		// 	getChild(i).buildAG(accessGraph);
		// }
		// return null;
		throw new AGBuildingError(this.getClass()+" does not know how to create an AccessGraph");
	}

	public boolean CompilationUnit.buildAccessGraph_CU(JavaAccessGraph accessGraph){
		if(pathName() != null){
			AGNode packageNode = accessGraph.addPackage(getPackageDecl(), true);

			for (TypeDecl td : getTypeDecls()){
				packageNode.content_$plus$eq(td.buildAG(accessGraph));
			}
			return true;
		}
		else{
			if(!getPackageDecl().equals("@primitive"))
				System.err.println(getPackageDecl()+" : pathName = null");
			return false;
		}
	}

	public AGNode MemberClassDecl.buildAG(JavaAccessGraph accessGraph){
		return typeDecl().buildAG(accessGraph);
	}

	public AGNode BodyDecl.buildAG(JavaAccessGraph accessGraph, AGNode usedNode){
		AGNode agNode = buildAGNode(accessGraph);
		usedNode.users_$plus$eq(agNode);
		return agNode;
	}

	public AGNode FieldDecl.buildAG(JavaAccessGraph accessGraph, AGNode usedNode){
		AGNode agNode = buildAGNode(accessGraph);
		
		//AST.List<VariableDecl> vdl = getVariableDeclList();
		for (VariableDecl vd : getVariableDeclList()) {
			AGNode vdNode = vd.buildAGNode(accessGraph);
			vdNode.users_$plus$eq(usedNode); //TODO check why (?!)
		}

		return agNode;
	}


	public AGNode FieldDeclaration.buildAG(JavaAccessGraph accessGraph){
		AGNode agNode = buildAGNode(accessGraph);

		for (Access use : uses()) {
			BodyDecl hbd = use.hostBodyDecl(); 
			agNode.users_$plus$eq(hbd.buildAG(accessGraph, agNode));
		}

		return agNode;
	}



	public AGNode FieldDecl.buildAG(JavaAccessGraph accessGraph){
		AGNode agNode = buildAGNode(accessGraph);
		for (VariableDecl vd : getVariableDeclList()) {
			vd.buildAGNode(accessGraph);
		}
		return agNode;
	}


	public static AGNode MethodDecl.addDependantUse(JavaAccessGraph accessGraph,
                                         Access dominatedUserAccess,
                                         AGNode dominatedUsee,
                                         AGNode dominantUsee){
        AGNode dominatedUser = dominatedUserAccess.hostBodyDecl().buildAG(accessGraph, dominatedUsee);

        //TODO find why qualifier can be null !! (call from an implicit this ?)
        if(dominatedUserAccess.getQualifier()!=null)
            try {
                AGNode primaryUser = dominatedUserAccess.getQualifier().getPrimaryUser(accessGraph);
                accessGraph.addUsesDependency(primaryUser, dominantUsee,
                        dominatedUser, dominatedUsee);
            } catch (AGBuildingError e) {
                System.out.println(e.getMessage());
            }

        return dominatedUser;
    }

	public AGNode MethodDecl.buildAG(JavaAccessGraph accessGraph){
        AGNode agNode = buildAGNode(accessGraph);

        AGNode hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {

            AGNode agUser = MethodDecl.addDependantUse(accessGraph,
                    user, agNode, hostTypeAGNode);

            agNode.users_$plus$eq(agUser);
        }

        return agNode;
    }

	public AGNode ConstructorDecl.buildAG(JavaAccessGraph accessGraph){
		AGNode agNode = buildAGNode(accessGraph);

        AGNode hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {
            MethodDecl.addDependantUse(accessGraph, user, agNode, hostTypeAGNode);
		}
		return agNode;
	}


	public AGNode Expr.getPrimaryUser(JavaAccessGraph accessGraph){
		/* "this : Access" is a method qualifier access*/
		throw new AGBuildingError("Cannot get a primary user from the qualifier : " + this);
	}

	public AGNode VarAccess.getPrimaryUser(JavaAccessGraph accessGraph){
		return decl().buildAGNode(accessGraph);
	}

	public AGNode Variable.buildAGNode(JavaAccessGraph accessGraph);
	

	public AGNode InstanceInitializer.buildAG(JavaAccessGraph accessGraph){
		System.err.println("TODO !! InstanceInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public AGNode StaticInitializer.buildAG(JavaAccessGraph accessGraph){
		System.err.println("TODO !! StaticInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public AGNode TypeDecl.buildAG(JavaAccessGraph accessGraph){
		
		AGNode tdNode = buildAG_TypeDecl(accessGraph);

		for (Access use : uses()) {
			BodyDecl hostBodyDecl = use.hostBodyDecl();
            if (hostBodyDecl != null) {
                AGNode userNode = hostBodyDecl.buildAGNode(accessGraph);
                tdNode.users_$plus$eq(userNode);
            }
		}

		for (BodyDecl bd : getBodyDeclList()) {

			AGNode bdNode = bd.buildAG(accessGraph);
			//if bd is an initializer (static or not), 
			//the corresponding AGNode is tdNode !!
			if(bdNode!=tdNode)
				tdNode.content_$plus$eq(bdNode);
		}

		return tdNode;
	}

    static void TypeDecl.addImplements(JavaAccessGraph accessGraph, 
    	AGNode sub, AST.List<Access> implementList){

    	for(Access a : implementList){
    		
    		if(!((TypeDeclared)a).getTypeDecl().isFromStdLib()){
    			sub.superTypes_$plus$eq(a.buildAGNode(accessGraph));
			}

			a.addExtendsAndImplementsUses(accessGraph, sub);
    	}
	}

	AGNode TypeDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		throw new AGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}

	AGNode ClassDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		AGNode agNode = buildAGNode(accessGraph);

		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			if(!superclass().isFromStdLib())
				agNode.superTypes_$plus$eq(getSuperClassAccess().buildAGNode(accessGraph));

			getSuperClassAccess().addExtendsAndImplementsUses(accessGraph, agNode);
		}

		TypeDecl.addImplements(accessGraph, agNode, getImplementss());

		return agNode;
	}

	AGNode InterfaceDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		AGNode agNode = buildAGNode(accessGraph);
		
		TypeDecl.addImplements(accessGraph, agNode, getSuperInterfaceIdList());

		return agNode;
	}


	void Access.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode sub){
		throw new AGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	void TypeAccess.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode sub){
		if(!decl().isFromStdLib()){
			AGNode sn = decl().buildAGNode(accessGraph);
			sn.users_$plus$eq(sub);
		}
	}

	void ParTypeAccess.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode sub){
		getTypeAccess().addExtendsAndImplementsUses(accessGraph, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addExtendsAndImplementsUses(accessGraph, sub);
		}
	}


	public puck.graph.NodeKind TypeDecl.getAGNodeKind(){
		throw new AGBuildingError(this.getClass()+" : Unkown nodekind");
	}

	public puck.graph.NodeKind ClassDecl.getAGNodeKind(){
		return puck.javaAG.JavaNodeKind.classKind();
	}

	public puck.graph.NodeKind InterfaceDecl.getAGNodeKind(){
		return puck.javaAG.JavaNodeKind.interfaceKind();
	}

	public AGNode ASTNode.buildAGNode(JavaAccessGraph accessGraph){
		throw new AGBuildingError(this.getClass()+" does not know how to create an AG Node");
	}

	public AGNode TypeDecl.buildAGNode(JavaAccessGraph accessGraph){
      if(isFromStdLib())
          return accessGraph.addNode(fullName(), name(), getAGNodeKind());
      else
          return accessGraph.addApiTypeNode(this, false);
  	}

	

	public AGNode TypeAccess.buildAGNode(JavaAccessGraph accessGraph){
		return decl().buildAGNode(accessGraph);
	}

	public AGNode ParTypeAccess.buildAGNode(JavaAccessGraph accessGraph){
		return accessGraph.addNode(fullName(), name(), 
				getTypeDecl().getAGNodeKind());
	}
	

	/*public AGNode BodyDecl.buildAGNode(JavaAccessGraph accessGraph){
		System.out.println("Bodydecl or subclass");
		return super.buildAGNode(accessGraph);
	}*/

	public AGNode FieldDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		puck.graph.NamedType type = new puck.graph.NamedType(type().buildAGNode(accessGraph));
		return accessGraph.addNode(fullName(), name(), 
				puck.javaAG.JavaNodeKind.field(type));
	}

	public AGNode VoidType.buildAGNode(JavaAccessGraph accessGraph){
		return accessGraph.apply(fullName());
	}
	public AGNode PrimitiveType.buildAGNode(JavaAccessGraph accessGraph){
		return accessGraph.apply(fullName());
	}

	/*public AGNode FieldDecl.buildAGNode(JavaAccessGraph accessGraph){
		AGNode agTypeNode = getTypeAccess().buildAGNode(accessGraph);

		return accessGraph.addNode(fullName(), name(), 
				puck.javaAG.JavaNodeKind.field(new puck.graph.NamedType(agTypeNode)));
	}*/


	static puck.graph.Type ASTNode.astParamsToAGType(JavaAccessGraph accessGraph, Callable c){
		ArrayList<puck.graph.Type> tparams = new ArrayList<puck.graph.Type>();
		for(ParameterDeclaration pdecl: c.getParameterList()){
			AGNode agTypeNode = pdecl.getTypeAccess().buildAGNode(accessGraph);
			tparams.add(new puck.graph.NamedType(agTypeNode));
		}
		return new puck.graph.Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams).toList());
	}


	public AGNode MethodDecl.buildAGNode(JavaAccessGraph accessGraph){
		
      puck.graph.Arrow methodAGType = new puck.graph.Arrow(ASTNode.astParamsToAGType(accessGraph,this),
              new puck.graph.NamedType(getTypeAccess().buildAGNode(accessGraph)));

      return accessGraph.addNode(fullName(), name(),
      		puck.javaAG.JavaNodeKind.method(methodAGType));
	}

	public AGNode ConstructorDecl.buildAGNode(JavaAccessGraph accessGraph){
		
      puck.graph.Arrow constructorAGType = new puck.graph.Arrow(ASTNode.astParamsToAGType(accessGraph,this),
              new puck.graph.NamedType(hostType().buildAGNode(accessGraph)));

      return accessGraph.addNode(fullName(), name(),
      			puck.javaAG.JavaNodeKind.constructor(constructorAGType));
	}

	

	public AGNode InstanceInitializer.buildAGNode(JavaAccessGraph accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public AGNode StaticInitializer.buildAGNode(JavaAccessGraph accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public AGNode VariableDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	public AGNode ParameterDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	interface TypeDeclared{
		TypeDecl getTypeDecl();
	}

	TypeAccess implements TypeDeclared;
	public TypeDecl TypeAccess.getTypeDecl(){
		return decl();
	}
	ParTypeAccess implements TypeDeclared;
	public TypeDecl ParTypeAccess.getTypeDecl(){
		return ((TypeAccess)getTypeAccess()).decl();
	}

	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}


	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();
		for(ConstructorDecl c : ctrs){
			if(c.getParametersAsString().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}
	

	//also present in jrrt-read-only/test/Testing.jrag
	public Program Frontend.getProgram() {
		return program;
	}
}