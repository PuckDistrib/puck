import puck.graph.AccessGraphBuilder;
import puck.graph.AccessGraph;
import puck.graph.AGNode;
import puck.graph.AGBuildingError;


aspect AccessGraphFactory {

	public AccessGraph Program.buildAccessGraph(){

		AccessGraphBuilder builder = new AccessGraphBuilder();

		List<CompilationUnit> compUnitList = getCompilationUnitList();
		for (CompilationUnit cu : compUnitList) {
			cu.buildAG(builder);
		}

	}

	AGNode ASTNode.buildAG(AccessGraphBuilder builder){
		// for(int i=0; i< getNumChild(); i++){
		// 	getChild(i).buildAG(builder);
		// }
		// return null;
		throw new AGBuildingError(this.getClass()+" does not know how to create an AccessGraph");
	}

	AGNode CompilationUnit.buildAG(AccessGraphBuilder builder){
		if(pathName() != null){
			AGNode packageNode = builder.addPackage(getPackageDecl());

			for (TypeDecl td : getTypeDecls()){
				//TODO correct and finish !!! cf addCompilationUnit
				td.buildAG(builder, packageNode);
				packageNode.addContains(addTypeDecl(td));
			}
		}
		else{ //TODO : delete
			System.out.println(getPackageDecl()+" : pathName = null");
		}
		return null;
	}

	AGNode MemberClassDecl.buildAG(AccessGraphBuilder builder){
		return typeDecl().buildAG(builder);
	}

	//TODO check need for BodyDecl.buildAG(AccessGraphBuilder builder){
	// return buildAGNode(builder);
	// }

	AGNode BodyDecl.buildAG(AccessGraphBuilder builder, AGNode usedNode){
		AGNode agNode = buildAGNode(builder);
		usedNode.addUser(agNode);
		return agNode;
	}

	AGNode FieldDecl.buildAG(AccessGraphBuilder builder, AGNode usedNode){
		AGNode agNode = buildAGNode(builder);
		
		//AST.List<VariableDecl> vdl = getVariableDeclList();
		for (VariableDecl vd : getVariableDeclList()) {
			AGNode vdNode = vd.buildAGNode(builder);
			vdNode.addUser(usedNode); //TODO check why (?!)
		}

		return agNode;
	}


	AGNode FieldDeclaration.buildAG(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);

		for (Access use : uses()) {
			BodyDecl hbd = use.hostBodyDecl(); 
			agNode.addUser(hbd.buildAG(builder, agNode));
		}

		return agNode;
	}



	AGNode FieldDecl.buildAG(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);
		for (VariableDecl vd : getVariableDeclList()) {
			vd.buildAGNode(builder);
		}
		return agNode;
	}

	AGNode MethodDecl.buildAG(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);

		for (Access use : uses()) {

			//TODO check why the use cycle
			AGNode user = use.hostBodyDecl().builAG(builder, agNode);
			agNode.addUser(user);
			
			AGNode hostTypeAGNode = hostType().buildAGNode(builder);

			//TODO add implem
			addMethodUsesDependencies(use, user, agNode, hostTypeAGNode);
		}

		return agNode;
	}

	AGNode ConstructorDecl.buildAG(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);
		for (Access use : uses()) {
			use.hostBodyDecl().buildAG(builder, agNode);
		}
		return agNode;
	}

	AGNode InstanceInitializer.buildAG(AccessGraphBuilder builder){
		System.err.println("TODO !! InstanceInitializer.buildAG");
		return buildAGNode(builder);
	}

	AGNode StaticInitializer.buildAG(AccessGraphBuilder builder){
		System.err.println("TODO !! StaticInitializer.buildAG");
		return buildAGNode(builder);
	}




	static scala.Option<puck.graph.Type> TypeDecl.noType = scala.Option.apply(null);


	puck.graph.NodeKind TypeDecl.getAGNodeKind(){
		throw new AGBuildingError(this.getClass()+" : Unkown nodekind");
	}

	puck.graph.NodeKind ClassDecl.getAGNodeKind(){
		return puck.graph.java.JavaNodeKind.classKind();
	}

	puck.graph.NodeKind InterfaceDecl.getAGNodeKind(){
		return puck.graph.java.JavaNodeKind.interfaceKind();
	}

	AGNode TypeDecl.buildAGNode(AccessGraphBuilder builder){
		return builder.addNode(fullName(), name(), getAGNodeKind(), TypeDecl.noType);
	}

	AGNode ASTNode.buildAGNode(AccessGraphBuilder builder){
		throw new AGBuildingError(this.getClass()+" does not know how to create an AG Node");
	}

	AGNode TypeAccess.buildAGNode(AccessGraphBuilder builder){
		return decl().buildAGNode(builder);
	}

	AGNode ParTypeAccess.buildAGNode(AccessGraphBuilder builder){
		return builder.addNode(fullName(), name(), 
				getTypeDecl().getAGNodeKind(), TypeDecl.noType);
	}
	

	AGNode BodyDecl.buildAGNode(AccessGraphBuilder builder){
		System.out.println("Bodydecl or subclass");
		return super.buildAGNode(builder);
	}

	AGNode FieldDeclaration.buildAGNode(AccessGraphBuilder builder){
		AGNode agTypeNode = type().buildAGNode(builder);

		return builder.addNode(fullName(), name(), 
				puck.graph.java.JavaNodeKind.field(), 
				new puck.graph.NamedType(type().fullName(), agTypeNode.id()));
	}

	AGNode FieldDecl.buildAGNode(AccessGraphBuilder builder){
		AGNode agTypeNode = getTypeAccess().buildAGNode(builder);

		return builder.addNode(fullName(), name(), 
				puck.graph.java.JavaNodeKind.field(), 
				new puck.graph.NamedType(type().fullName(), agTypeNode.id()));
	}

	static puck.graph.Type Callable.paramsAGType(AccessGraphBuilder builder, Callable c){
		ArrayList<puck.graph.Type> tparams = new ArrayList<puck.graph.Type>();
		for(ParameterDeclaration pdecl: getParameterList()){
			AGNode agTypeNode = pdecl.getTypeAccess().buildAGNode(builder);
			tparams.add(new puck.graph.NamedType(pdecl.getTypeAccess().fullName(), 
							agTypeNode.id()));
		}
		return new puck.graph.Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams));
	}


	AGNode MethodDecl.buildAGNode(AccessGraphBuilder builder){
		
      AGNode agReturnTypeNode =getTypeAccess().buildAGNode(builder);

      puck.graph.Type methodAGType = new puck.graph.Arrow(Callable.paramsAGType(builder,this),
              new puck.graph.NamedType(getTypeAccess().fullName(),agReturnTypeNode.id()));

      return builder.addNode(fullName(), name(),
      		puck.graph.java.JavaNodeKind.method(), 
      		scala.Option.apply(methodAGType));
	}

	AGNode ConstructorDecl.buildAGNode(AccessGraphBuilder builder){
		
      AGNode agReturnTypeNode = hostType().buildAGNode(builder);

      puck.graph.Type constructorAGType = new puck.graph.Arrow(Callable.paramsAGType(builder,this),
              new puck.graph.NamedType(getTypeAccess().fullName(),agReturnTypeNode.id()));

      return builder.addNode(fullName(), name(),
      			puck.graph.java.JavaNodeKind.constructor(), 
      			scala.Option.apply(constructorAGType));
	}

	AGNode FieldDecl.buildAGNode(AccessGraphBuilder builder){
		return builder.addNode(fullName(), name(),
      			puck.graph.java.JavaNodeKind.field(), 
      			scala.Option.apply(getTypeAccess().buildAGNode(builder)));
	}

	AGNode InstanceInitializer.buildAGNode(AccessGraphBuilder builder){
		return hostType().buildAGNode(builder);
	}

	AGNode StaticInitializer.buildAGNode(AccessGraphBuilder builder){
		return hostType().buildAGNode(builder);
	}

	interface TypeDeclared{
		TypeDecl getTypeDecl();
	}

	TypeAccess implements TypeDeclared;
	public TypeDecl TypeAccess.getTypeDecl(){
		return decl();
	}
	ParTypeAccess implements TypeDeclared;
	public TypeDecl ParTypeAccess.getTypeDecl(){
		return ((TypeAccess)getTypeAccess()).decl();
	}

	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}

	AGNode TypeDecl.buildAG(AccessGraphBuilder builder){
		
		AGNode tdNode = buildAG_TypeDecl(builder);

		for (Access use : uses()) {
			//TODO FINISH !!! cf addTypeDecl
			tdNode.addUser(use.buildAGNode(builder));
		}

		return tdNode;
	}

    static void TypeDecl.addImplements(AccessGraphBuilder builder, 
    	AGNode sub, AST.List<Access> implementList){

    	for(Access a : implementList){
    		
    		if(!((TypeDeclared)a).getTypeDecl().isFromStdLib()){
				AccessGraphBuilder.addIsa(sub, a.buildAGNode(builder));
			}

			a.addExtendsAndImplementsUses(builder, sub);
    	}
	}

	AGNode TypeDecl.buildAG_TypeDecl(AccessGraphBuilder builder){
		throw new AGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}
	AGNode ClassDecl.buildAG_TypeDecl(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);

		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			if(!superclass().isFromStdLib())
				AccessGraphBuilder.addIsa(agNode, getSuperClassAccess().buildAGNode(builder));

			getSuperClassAccess().addExtendsAndImplementsUses(builder, agNode);
		}

		TypeDecl.addImplements(builder, agNode, getImplementss());

		return agNode;
	}

	AGNode InterfaceDecl.buildAG_TypeDecl(AccessGraphBuilder builder){
		AGNode agNode = buildAGNode(builder);
		
		TypeDecl.addImplements(builder, agNode, getSuperInterfaceIdList());

		return agNode;
	}


	void Access.addExtendsAndImplementsUses(AccessGraphBuilder builder, AGNode sub){
		throw new AGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	void TypeAccess.addExtendsAndImplementsUses(AccessGraphBuilder builder, AGNode sub){
		if(!decl().isFromStdLib()){
			AGNode sn = decl().buildAGNode(builder);
			sn.addUser(sub);
		}
	}

	void ParTypeAccess.addExtendsAndImplementsUses(AccessGraphBuilder builder, AGNode sub){
		getTypeAccess().addExtendsAndImplementsUses(builder, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addExtendsAndImplementsUses(builder, sub);
		}
	}

}