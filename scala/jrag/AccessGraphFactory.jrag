import puck.javaAG.JavaAccessGraph;
import puck.javaAG.JavaNodeKind;
import puck.graph.AGNode;
import puck.graph.AGBuildingError;


aspect AccessGraphFactory {

	public interface LoadingListener {
		public void update(double loading);
	}	

	public JavaAccessGraph Program.buildAccessGraph(Map<String,Collection<BodyDecl>> stringsRequest, LoadingListener ll){

		JavaAccessGraph accessGraph = new puck.javaAG.JavaAccessGraph();

		accessGraph.program_$eq(this);

		if(stringsRequest != null){
			for (java.util.Map.Entry<String, Collection<BodyDecl>>  entry : allStringUses(stringsRequest).entrySet()) {
				accessGraph.addStringLiteral(entry.getKey(), entry.getValue());
			}
		}

		if(ll == null)
			silentBuild(accessGraph);
		else
			verboseBuild(accessGraph, ll);

		return accessGraph;
	}

	private void Program.silentBuild(JavaAccessGraph accessGraph){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
		}
	}

	private void Program.verboseBuild(JavaAccessGraph accessGraph, LoadingListener ll){
		List<CompilationUnit> compUnitList = getCompilationUnitList();
		double nchild = compUnitList.getNumChild();
		double d = 0.0;
		for (CompilationUnit cu : compUnitList) {
			if (!cu.buildAccessGraph_CU(accessGraph))				
				break;
			d++;
			ll.update(d/nchild);
		}
		ll.update(1);
	}


	public AGNode<JavaNodeKind> ASTNode.buildAG(JavaAccessGraph accessGraph){
		// for(int i=0; i< getNumChild(); i++){
		// 	getChild(i).buildAG(accessGraph);
		// }
		// return null;
		throw new AGBuildingError(this.getClass()+" does not know how to create an AccessGraph");
	}

	public boolean CompilationUnit.buildAccessGraph_CU(JavaAccessGraph accessGraph){
		if(pathName() != null){
			AGNode<JavaNodeKind> packageNode = accessGraph.addPackage(getPackageDecl(), true);

			for (TypeDecl td : getTypeDecls()){
				packageNode.contentAdd(td.buildAG(accessGraph), true);
			}
			return true;
		}
		else{
			if(!getPackageDecl().equals("@primitive"))
				System.err.println(getPackageDecl()+" : pathName = null");
			return false;
		}
	}

	public AGNode<JavaNodeKind> MemberClassDecl.buildAG(JavaAccessGraph accessGraph){
		return typeDecl().buildAG(accessGraph);
	}

	public AGNode<JavaNodeKind> FieldDecl.buildAG(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> usedNode){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);
		
		//AST.List<VariableDecl> vdl = getVariableDeclList();
		for (VariableDecl vd : getVariableDeclList()) {
			AGNode<JavaNodeKind> vdNode = vd.buildAGNode(accessGraph);
			vdNode.users_$plus$eq(usedNode, true); //TODO check why (?!)
		}

		return agNode;
	}


	public AGNode<JavaNodeKind> FieldDeclaration.buildAG(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);

		for (Access user : uses()) {
			AGNode<JavaNodeKind> agUser = user.hostBodyDecl().buildAGNode(accessGraph);
			agNode.users_$plus$eq(agUser, true);
		}

		return agNode;
	}



	public AGNode<JavaNodeKind> FieldDecl.buildAG(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);
		for (VariableDecl vd : getVariableDeclList()) {
			vd.buildAGNode(accessGraph);
		}
		return agNode;
	}

	public AGNode<JavaNodeKind> Expr.buildDominantUserAGNode(JavaAccessGraph accessGraph){
		throw new AGBuildingError("Cannot get a primary user from the qualifier : " + this +
                " ("+this.getClass()+")");
	}



	public AGNode<JavaNodeKind> VarAccess.buildDominantUserAGNode(JavaAccessGraph accessGraph){
      return decl().buildAGNode(accessGraph);
  	}

  	//in case of static call
  	public AGNode<JavaNodeKind> TypeAccess.buildDominantUserAGNode(JavaAccessGraph accessGraph){
      return decl().buildAGNode(accessGraph);
  	}

  	public AGNode<JavaNodeKind> MethodAccess.buildDominantUserAGNode(JavaAccessGraph accessGraph){
      return decl().buildAGNode(accessGraph);
  	}

	public AGNode<JavaNodeKind> MethodDecl.buildAG(JavaAccessGraph accessGraph){
        AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);

        AGNode<JavaNodeKind> hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {
            AGNode<JavaNodeKind> agUser = user.hostBodyDecl().buildAGNode(accessGraph);
            agNode.users_$plus$eq(agUser, true);

            //if user.getQualifier == null
            //then the method is called from within the hosting class (implicit "this" qualifier)
            if(user.getQualifier()!=null) {
                AGNode<JavaNodeKind> agDominantUser = user.getQualifier().buildDominantUserAGNode(accessGraph);
                accessGraph.addUsesDependency(agDominantUser, hostTypeAGNode,
                        agUser, agNode);

            }
        }

        return agNode;
    }

	public AGNode<JavaNodeKind> ConstructorDecl.buildAG(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);

        AGNode<JavaNodeKind> hostTypeAGNode = hostType().buildAGNode(accessGraph);

        for (Access user : uses()) {
            AGNode<JavaNodeKind> agUser = user.hostBodyDecl().buildAGNode(accessGraph);

            agNode.users_$plus$eq(agUser, true);

        //    MethodDecl.addDependantUse(accessGraph, user, agNode, hostTypeAGNode);
            accessGraph.addUsesDependency(agUser, hostTypeAGNode,
                    agUser, agNode);

        }
		return agNode;
	}

	public AGNode<JavaNodeKind> Variable.buildAGNode(JavaAccessGraph accessGraph);
	

	public AGNode<JavaNodeKind> InstanceInitializer.buildAG(JavaAccessGraph accessGraph){
		System.err.println("TODO !! InstanceInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> StaticInitializer.buildAG(JavaAccessGraph accessGraph){
		System.err.println("TODO !! StaticInitializer.buildAG");
		return buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> TypeDecl.buildAG(JavaAccessGraph accessGraph){
		
		AGNode<JavaNodeKind> tdNode = buildAG_TypeDecl(accessGraph);

		for (Access use : uses()) {
			BodyDecl hostBodyDecl = use.hostBodyDecl();
            if (hostBodyDecl != null) {
                AGNode<JavaNodeKind> userNode = hostBodyDecl.buildAGNode(accessGraph);
                tdNode.users_$plus$eq(userNode, true);
            }
		}

		for (BodyDecl bd : getBodyDeclList()) {

			AGNode<JavaNodeKind> bdNode = bd.buildAG(accessGraph);
			//if bd is an initializer (static or not), 
			//the corresponding AGNode is tdNode !!
			if(bdNode!=tdNode)
				tdNode.contentAdd(bdNode, true);
		}

		return tdNode;
	}

    static void TypeDecl.addImplements(JavaAccessGraph accessGraph, 
    	AGNode<JavaNodeKind> sub, AST.List<Access> implementList){

    	for(Access a : implementList){
    		
    		if(!((TypeDeclared)a).getTypeDecl().isFromStdLib()){
    			sub.superTypes_$plus$eq(a.buildAGNode(accessGraph), true);
			}

			a.addExtendsAndImplementsUses(accessGraph, sub);
    	}
	}

	AGNode<JavaNodeKind> TypeDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		throw new AGBuildingError(this.getClass() + " : expected ClassDecl or InterfaceDecl");
	}

	AGNode<JavaNodeKind> ClassDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);

		if (hasSuperclass() && !"java.lang.Object".equals(superclass().fullName())){
			
			if(!superclass().isFromStdLib())
				agNode.superTypes_$plus$eq(getSuperClassAccess().buildAGNode(accessGraph), true);

			getSuperClassAccess().addExtendsAndImplementsUses(accessGraph, agNode);
		}

		TypeDecl.addImplements(accessGraph, agNode, getImplementss());

		return agNode;
	}

	AGNode<JavaNodeKind> InterfaceDecl.buildAG_TypeDecl(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> agNode = buildAGNode(accessGraph);
		
		TypeDecl.addImplements(accessGraph, agNode, getSuperInterfaceIdList());

		return agNode;
	}


	void Access.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> sub){
		throw new AGBuildingError(this.getClass() + " : expected TypeAccess or ParTypeAccess");
	}


	void TypeAccess.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> sub){
		if(!decl().isFromStdLib()){
			AGNode<JavaNodeKind> sn = decl().buildAGNode(accessGraph);
			sn.users_$plus$eq(sub, true);
		}
	}

	void ParTypeAccess.addExtendsAndImplementsUses(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> sub){
		getTypeAccess().addExtendsAndImplementsUses(accessGraph, sub);
		for(Access typeArg : getTypeArguments()){
			typeArg.addExtendsAndImplementsUses(accessGraph, sub);
		}
	}


	public JavaNodeKind TypeDecl.getAGNodeKind(){
		throw new AGBuildingError(this.getClass()+" : Unkown nodekind");
	}

	public JavaNodeKind ClassDecl.getAGNodeKind(){
		return puck.javaAG.JavaNodeKind.classKind();
	}

	public JavaNodeKind InterfaceDecl.getAGNodeKind(){
		return puck.javaAG.JavaNodeKind.interfaceKind();
	}

	public AGNode<JavaNodeKind> ASTNode.buildAGNode(JavaAccessGraph accessGraph){
		throw new AGBuildingError(this.getClass()+" does not know how to create an AG Node");
	}



	public void TypeDecl.registerDecl(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> agnode){
      throw new Error(this.getClass() +" does not know how to register itself");
  	}

  	public void ClassDecl.registerDecl(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> agnode){
        accessGraph.registerDecl(agnode, this);
    }

    public void InterfaceDecl.registerDecl(JavaAccessGraph accessGraph, AGNode<JavaNodeKind> agnode){
        accessGraph.registerDecl(agnode, this);
    }

	public AGNode<JavaNodeKind> TypeDecl.buildAGNode(JavaAccessGraph accessGraph){
      AGNode<JavaNodeKind> node;
      if(isFromStdLib())
          node = accessGraph.addApiTypeNode(this, false);
      else
          node = accessGraph.addNode(fullName(), name(), getAGNodeKind());

      registerDecl(accessGraph, node);
      return node;
  	}

	

	public AGNode<JavaNodeKind> TypeAccess.buildAGNode(JavaAccessGraph accessGraph){
		return decl().buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> ParTypeAccess.buildAGNode(JavaAccessGraph accessGraph){
		return accessGraph.addNode(fullName(), name(), 
				getTypeDecl().getAGNodeKind());
	}
	

	/*public AGNode BodyDecl.buildAGNode(JavaAccessGraph accessGraph){
		System.out.println("Bodydecl or subclass");
		return super.buildAGNode(accessGraph);
	}*/

	public AGNode<JavaNodeKind> FieldDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		puck.javaAG.JavaType type = new puck.javaAG.JavaType(type().buildAGNode(accessGraph));
		AGNode<JavaNodeKind> node = accessGraph.addNode(fullName(), name(),
				puck.javaAG.JavaNodeKind.field(type));

        accessGraph.registerDecl(node, this);
        return node;
	}

	public AGNode<JavaNodeKind> VoidType.buildAGNode(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> node = accessGraph.apply(fullName());
      //TODO FIX !!
      //accessGraph.registerDecl(node, this);
      return node;
	}
	public AGNode<JavaNodeKind> PrimitiveType.buildAGNode(JavaAccessGraph accessGraph){
		AGNode<JavaNodeKind> node =  accessGraph.apply(fullName());

      	accessGraph.registerDecl(node, this);

      	return node;

	}

	/*public AGNode FieldDecl.buildAGNode(JavaAccessGraph accessGraph){
		AGNode agTypeNode = getTypeAccess().buildAGNode(accessGraph);

		return accessGraph.addNode(fullName(), name(), 
				puck.javaAG.JavaNodeKind.field(new puck.graph.NamedType(agTypeNode)));
	}*/


	static puck.graph.Tuple ASTNode.astParamsToAGType(JavaAccessGraph accessGraph, Callable c){
		ArrayList<puck.graph.Type> tparams = new ArrayList<puck.graph.Type>();
		for(ParameterDeclaration pdecl: c.getParameterList()){
			AGNode<JavaNodeKind> agTypeNode = pdecl.getTypeAccess().buildAGNode(accessGraph);
			tparams.add(new puck.graph.NamedType<JavaNodeKind>(agTypeNode));
		}
		return new puck.graph.Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams).toList());
	}


	public AGNode<JavaNodeKind> MethodDecl.buildAGNode(JavaAccessGraph accessGraph){
		
      puck.javaAG.MethodType methodAGType = new puck.javaAG.MethodType(ASTNode.astParamsToAGType(accessGraph,this),
              new puck.graph.NamedType<JavaNodeKind>(getTypeAccess().buildAGNode(accessGraph)));

      AGNode<JavaNodeKind> node = accessGraph.addNode(fullName(), name(),
      		puck.javaAG.JavaNodeKind.method(methodAGType));

      accessGraph.registerDecl(node, this);

      return node;
	}

	public AGNode<JavaNodeKind> ConstructorDecl.buildAGNode(JavaAccessGraph accessGraph){
		
      puck.javaAG.MethodType constructorAGType = new puck.javaAG.MethodType(ASTNode.astParamsToAGType(accessGraph,this),
              new puck.graph.NamedType<JavaNodeKind>(hostType().buildAGNode(accessGraph)));

      AGNode<JavaNodeKind> node = accessGraph.addNode(fullName(), name(),
      			puck.javaAG.JavaNodeKind.constructor(constructorAGType));

      accessGraph.registerDecl(node, this);
      return node;
	}

	

	public AGNode<JavaNodeKind> InstanceInitializer.buildAGNode(JavaAccessGraph accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> StaticInitializer.buildAGNode(JavaAccessGraph accessGraph){
		return hostType().buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> VariableDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	public AGNode<JavaNodeKind> ParameterDeclaration.buildAGNode(JavaAccessGraph accessGraph){
		return hostBodyDecl().buildAGNode(accessGraph);
	}

	interface TypeDeclared{
		TypeDecl getTypeDecl();
	}

	TypeAccess implements TypeDeclared;
	public TypeDecl TypeAccess.getTypeDecl(){
		return decl();
	}
	ParTypeAccess implements TypeDeclared;
	public TypeDecl ParTypeAccess.getTypeDecl(){
		return ((TypeAccess)getTypeAccess()).decl();
	}

	boolean TypeDecl.isFromStdLib(){
			return compilationUnit().packageName() == PRIMITIVE_PACKAGE_NAME ||
              compilationUnit().pathName().startsWith(System.getProperty("java.home"));
	}


	public ConstructorDecl TypeDecl.findConstructorBySignature(String paramsDescr){
		Collection<ConstructorDecl> ctrs = constructors();
		for(ConstructorDecl c : ctrs){
			if(c.getParametersAsString().equals(paramsDescr)){
				return c;
			}
		}
		return null;
	}
	

	//also present in jrrt-read-only/test/Testing.jrag
	public Program Frontend.getProgram() {
		return program;
	}
}