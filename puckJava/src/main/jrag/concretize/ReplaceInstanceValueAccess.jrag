
aspect ReplaceInstanceValueAccess {

    public void ASTNode.replaceThisQualifierFor(MethodDecl method, Access byAccess){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceThisQualifierFor(method, byAccess);
    }

    public void MethodAccess.replaceThisQualifierFor(MethodDecl method, Access byAccess){
        if(this.decl() == method){
            if(getQualifier() == null || getQualifier().isThisAccess())
                replace(this).with(new Dot(byAccess, this));
            else
                replace(getQualifier()).with(byAccess);
        }
    }

    public void ASTNode.replaceThisQualifierFor(FieldDeclaration field, Access byAccess){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceThisQualifierFor(field, byAccess);
    }

    public void VarAccess.replaceThisQualifierFor(FieldDeclaration field, Access byAccess){
        if(this.decl() == field){
            if(getQualifier() == null || getQualifier().isThisAccess())
                replace(this).with(new Dot(byAccess, this));
            else
                replace(getQualifier()).with(byAccess);
        }
    }

    public void ASTNode.replaceFieldAccess(FieldDeclaration oldUsed, Access newUsed) {
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceFieldAccess(oldUsed, newUsed);
    }
    public void VarAccess.replaceFieldAccess(FieldDeclaration oldUsed, Access newUsed) {
        if(decl().equals(oldUsed)){
            replace(this).with(newUsed);
        }
    }

    public void ASTNode.replaceMethodCall(MethodDecl oldUsed, MethodDecl newUsed){
        for(int i = 0; i < getNumChild(); i++)
            getChild(i).replaceMethodCall(oldUsed, newUsed);
    }

    public void MethodAccess.replaceMethodCall(MethodDecl oldUsed, MethodDecl newUsed){
        if(this.decl() == oldUsed) {
            MethodAccess ma = new MethodAccess(newUsed.name(), this.getArgList());
            ma.setTargetMethod(new SavedMethodDecl(newUsed), this.isMonoCall);
            replace(this).with(ma);
        }
    }

}