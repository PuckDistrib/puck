import puck.graph.DGBuildingError;
import puck.graph.Tuple;
import puck.graph.Type;
import puck.javaGraph.JavaNamedType;
import puck.javaGraph.MethodType;
import scala.Some;

aspect TypeFactory {
	

	public abstract void BodyDecl.buildDGType(JavaGraphBuilder builder, int thisId);
	
	public void MemberTypeDecl.buildDGType(JavaGraphBuilder builder, int thisId){}
	public void StaticInitializer.buildDGType(JavaGraphBuilder builder, int thisId){}
	public void InstanceInitializer.buildDGType(JavaGraphBuilder builder, int thisId){}


	static void ASTNode.astParamsToDGType(JavaGraphBuilder builder, int thisId, Callable c){
//		ArrayList<Type> tparams = new ArrayList<Type>();
		ArrayList<Integer> params = new ArrayList<Integer>();

		for(ParameterDeclaration pdecl: c.getParameterList()){

			int agTypeNode = pdecl.getTypeAccess().buildDGNode(builder);
			int paramId = pdecl.buildDGNode(builder);
			//DGUses typeUse = new Uses(paramId, agTypeNode, UsesAccessKind.none());
			params.add(paramId);
		 	//builder.addEdge(typeUse);
			builder.setType(paramId, new JavaNamedType(agTypeNode));
		}
		builder.addParams(thisId, params);
		//return new Tuple(scala.collection.JavaConversions.asScalaBuffer(tparams).toList());
	}

	public void FieldDecl.buildDGType(JavaGraphBuilder builder, int thisId){
		throw new DGBuildingError("missing type for FieldDecl");
	}
		
	public void MethodDecl.buildDGType(JavaGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, new JavaNamedType(getTypeAccess().buildDGNode(builder)));
	}

	public void ConstructorDecl.buildDGType(JavaGraphBuilder builder, int thisId){
		ASTNode.astParamsToDGType(builder, thisId, this);
		builder.setType(thisId, new JavaNamedType(hostType().buildDGNode(builder)));
	}

	public void FieldDeclaration.buildDGType(JavaGraphBuilder builder, int thisId){
		builder.setType(thisId, new JavaNamedType(type().buildDGNode(builder)));
	}



}