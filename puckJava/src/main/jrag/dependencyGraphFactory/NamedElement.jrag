import puck.javaGraph.nodeKind.JavaNodeKind;

aspect NamedElement {

	syn boolean ASTNode.isNamedElement();
	eq ASTNode.isNamedElement() = false;

	eq TypeDecl.isNamedElement() = true;
	eq AbstractWildcardType.isNamedElement() = false;
    eq WildcardType.isNamedElement() = true;
	//eq InterfaceDecl.isNamedElement() = true;
	//eq ClassDecl.isNamedElement() = true;

	eq FieldDeclaration.isNamedElement() = true;
	eq MethodDecl.isNamedElement() = true;
	eq ConstructorDecl.isNamedElement() = true;

    interface DGNamedElement {
		String fullName();
		String name();

		void registerDecl(JavaGraphBuilder builder, int thisId);

	}

	TypeDecl implements DGNamedElement;
	// InterfaceDecl implements DGNamedElement;
	// ClassDecl implements DGNamedElement;

	FieldDeclaration implements DGNamedElement;
	MethodDecl implements DGNamedElement;
	ConstructorDecl implements DGNamedElement;


    syn boolean ASTNode.isSubstitute();
    eq ASTNode.isSubstitute() = false;
    eq ClassDeclSubstituted.isSubstitute() = true;
    eq ConstructorDeclSubstituted.isSubstitute() = true;
    eq FieldDeclarationSubstituted.isSubstitute() = true;
    eq GenericClassDeclSubstituted.isSubstitute() = true;
    eq GenericInterfaceDeclSubstituted.isSubstitute() = true;
    eq InterfaceDeclSubstituted.isSubstitute() = true;
    eq MethodDeclSubstituted.isSubstitute() = true;
    eq ParameterDeclarationSubstituted.isSubstitute() = true;
    eq VariableArityParameterDeclarationSubstituted.isSubstitute() = true;

    eq MethodAccess.isSubstitute() = decl().isSubstitute();

    interface Substitute {
        ASTNode getOriginal();
    }

    ClassDeclSubstituted implements Substitute;
    ConstructorDeclSubstituted implements Substitute;
    FieldDeclarationSubstituted implements Substitute;
    GenericClassDeclSubstituted implements Substitute;
    GenericInterfaceDeclSubstituted implements Substitute;
    InterfaceDeclSubstituted implements Substitute;
    MethodDeclSubstituted implements Substitute;
    ParameterDeclarationSubstituted implements Substitute;
    VariableArityParameterDeclarationSubstituted implements Substitute;

	//duplication needed for overloaded static resolution
	public void TypeDecl.registerDecl(JavaGraphBuilder builder, int thisId){
      //System.err.println(this.fullName() + " - " + this.getClass() + " registered as primitive");
      builder.registerDecl(thisId, this);
  	}

	public void InterfaceDecl.registerDecl(JavaGraphBuilder builder, int thisId){
		builder.registerDecl(thisId, this);
	}

	public void ClassDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    public void WildcardType.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    
    public void ConstructorDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    public void FieldDeclaration.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    public void MethodDecl.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }
    public void TypeVariable.registerDecl(JavaGraphBuilder builder, int thisId){
        builder.registerDecl(thisId, this);
    }

    syn JavaNodeKind DGNamedElement.getDGNodeKind();

    eq TypeDecl.getDGNodeKind(){
    	throw new DGBuildingError(this.fullName() + " - " + this.getClass()+" : Unkown nodekind");
    }
    eq TypeVariable.getDGNodeKind() = JavaNodeKind.typeVariable();
    eq ClassDecl.getDGNodeKind() = JavaNodeKind.classKind();
    eq InterfaceDecl.getDGNodeKind() = JavaNodeKind.interfaceKind();
    eq WildcardType.getDGNodeKind() = JavaNodeKind.wildcardType();
    eq PrimitiveType.getDGNodeKind() = JavaNodeKind.primitive();
	eq VoidType.getDGNodeKind() = JavaNodeKind.primitive();
    eq NullType.getDGNodeKind() = JavaNodeKind.primitive();

    eq FieldDeclaration.getDGNodeKind() = JavaNodeKind.field();

    eq MethodDecl.getDGNodeKind(){
    	if(this.isAbstract())
	        return JavaNodeKind.abstractMethod();
	    else
	        return JavaNodeKind.method();
    }

    eq ConstructorDecl.getDGNodeKind() = JavaNodeKind.constructor();



}